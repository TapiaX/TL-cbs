module pp/TL-Start-pp

imports
  libstratego-gpp
  libspoofax/sdf/pp
  libspoofax/term/origin
  libspoofax/term/annotation
  libstratego-sglr
  libstratego-sglr
  signatures/TL-Start-sig


imports
  signatures/Funcons-sig


imports
  pp/Funcons-pp


strategies
  prettyprint-example =
    prettyprint-unknown

  prettyprint-unknown =
    fail

  prettyprint-unknown(|sort) =
    fail


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-unknown-start-symbols

  prettyprint-unknown-start-symbols =
    fail


strategies
  prettyprint-unknown =
    prettyprint-unknown-LEX-int

  prettyprint-unknown =
    prettyprint-unknown-LEX-id

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-LEX-int>
    where <?"LEX-int"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-LEX-id>
    where <?"LEX-id"> sort

  prettyprint-unknown-LEX-int =
    ![S(<is-string>)]

  prettyprint-unknown-LEX-id =
    ![S(<is-string>)]

  prettyprint-unknown-LEX-int :
    amb([h|hs]) -> <prettyprint-unknown-LEX-int> h

  prettyprint-unknown-LEX-id :
    amb([h|hs]) -> <prettyprint-unknown-LEX-id> h


strategies
  prettyprint-unknown =
    prettyprint-unknown-L-start

  prettyprint-unknown =
    prettyprint-unknown-L-exp

  prettyprint-unknown =
    prettyprint-unknown-L-int

  prettyprint-unknown =
    prettyprint-unknown-L-id

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-L-start>
    where <?"L-start"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-L-exp>
    where <?"L-exp"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-L-int>
    where <?"L-int"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-L-id>
    where <?"L-id"> sort

  prettyprint-unknown-L-start :
    L-start--L-exp(t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , t1__'
                              )
                            ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-L-exp)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   ]

  is-unknown-L-start =
    ?L-start--L-exp(_)

  unknown-get-indent :
    (t@L-start--L-exp(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"L-start"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@L-start--L-exp(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"L-start"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@L-start--L-exp(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"L-start"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-L-exp :
    L-exp--L-int(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , t1__'
                            )
                          ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-L-int)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   ]

  is-unknown-L-exp =
    ?L-exp--L-int(_)

  unknown-get-indent :
    (t@L-exp--L-int(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"L-exp"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@L-exp--L-int(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"L-exp"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@L-exp--L-int(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"L-exp"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-L-exp :
    L-exp--L-id(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , t1__'
                           )
                         ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-L-id)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   ]

  is-unknown-L-exp =
    ?L-exp--L-id(_)

  unknown-get-indent :
    (t@L-exp--L-id(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"L-exp"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@L-exp--L-id(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"L-exp"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@L-exp--L-id(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"L-exp"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-L-int :
    LEX-int(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , t1__'
                       )
                     ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-LEX-int)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   ]

  is-unknown-L-int =
    ?LEX-int(_)

  unknown-get-indent :
    (t@LEX-int(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"L-int"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@LEX-int(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"L-int"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@LEX-int(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"L-int"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-L-id :
    LEX-id(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , t1__'
                      )
                    ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-LEX-id)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   ]

  is-unknown-L-id =
    ?LEX-id(_)

  unknown-get-indent :
    (t@LEX-id(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"L-id"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@LEX-id(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"L-id"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@LEX-id(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"L-id"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  is-unknown-L-start =
    fail

  is-unknown-L-exp =
    fail

  is-unknown-L-int =
    fail

  is-unknown-L-id =
    fail

  prettyprint-unknown-L-start :
    amb([h|hs]) -> <prettyprint-unknown-L-start> h

  prettyprint-unknown-L-exp :
    amb([h|hs]) -> <prettyprint-unknown-L-exp> h

  prettyprint-unknown-L-int :
    amb([h|hs]) -> <prettyprint-unknown-L-int> h

  prettyprint-unknown-L-id :
    amb([h|hs]) -> <prettyprint-unknown-L-id> h

  prettyprint-unknown-L-start :
    L-start-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[L-start]]")]
                         )
                       ]

  is-unknown-L-start =
    ?L-start-Plhdr()

  prettyprint-unknown-L-exp :
    L-exp-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[L-exp]]")]
                       )
                     ]

  is-unknown-L-exp =
    ?L-exp-Plhdr()

  prettyprint-unknown-L-int :
    L-int-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[L-int]]")]
                       )
                     ]

  is-unknown-L-int =
    ?L-int-Plhdr()

  prettyprint-unknown-LEX-int :
    LEX-int-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[LEX-int]]")]
                         )
                       ]

  is-unknown-LEX-int =
    ?LEX-int-Plhdr()

  prettyprint-unknown-L-id :
    L-id-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[L-id]]")]
                      )
                    ]

  is-unknown-L-id =
    ?L-id-Plhdr()

  prettyprint-unknown-LEX-id :
    LEX-id-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[LEX-id]]")]
                        )
                      ]

  is-unknown-LEX-id =
    ?LEX-id-Plhdr()

  prettyprint-unknown-L-start :
    L-start-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[L-start]]")]
                          )
                        ]

  is-unknown-L-start =
    ?L-start-Plhdr(_)

  prettyprint-unknown-L-exp :
    L-exp-Plhdr(_) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[L-exp]]")]
                        )
                      ]

  is-unknown-L-exp =
    ?L-exp-Plhdr(_)

  prettyprint-unknown-L-int :
    L-int-Plhdr(_) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[L-int]]")]
                        )
                      ]

  is-unknown-L-int =
    ?L-int-Plhdr(_)

  prettyprint-unknown-LEX-int :
    LEX-int-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[LEX-int]]")]
                          )
                        ]

  is-unknown-LEX-int =
    ?LEX-int-Plhdr(_)

  prettyprint-unknown-L-id :
    L-id-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[L-id]]")]
                       )
                     ]

  is-unknown-L-id =
    ?L-id-Plhdr(_)

  prettyprint-unknown-LEX-id :
    LEX-id-Plhdr(_) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[LEX-id]]")]
                         )
                       ]

  is-unknown-LEX-id =
    ?LEX-id-Plhdr(_)


strategies
  prettyprint-unknown =
    prettyprint-unknown-FCT-Quoted

  prettyprint-unknown =
    prettyprint-unknown-FCT

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-FCT-Quoted>
    where <?"FCT-Quoted"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-FCT>
    where <?"FCT"> sort

  prettyprint-unknown-FCT :
    T-start(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , t1__'
                       )
                     ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ S("start")
                                   , S(" ")
                                   , S("[:")
                                   , S(" ")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-L-start)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S(" ")
                                   , S(":]")
                                   ]

  is-unknown-FCT =
    ?T-start(_)

  unknown-get-indent :
    (t@T-start(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@T-start(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@T-start(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    T-eval(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , t1__'
                      )
                    ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ S("eval")
                                   , S(" ")
                                   , S("[:")
                                   , S(" ")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-L-exp)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S(" ")
                                   , S(":]")
                                   ]

  is-unknown-FCT =
    ?T-eval(_)

  unknown-get-indent :
    (t@T-eval(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@T-eval(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@T-eval(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT-Quoted :
    L-int(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , t1__'
                     )
                   ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-L-int)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   ]

  is-unknown-FCT-Quoted =
    ?L-int(_)

  unknown-get-indent :
    (t@L-int(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT-Quoted"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@L-int(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT-Quoted"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@L-int(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT-Quoted"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    T-int(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , t1__'
                     )
                   ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ S("int")
                                   , S(" ")
                                   , S("[:")
                                   , S(" ")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-L-int)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S(" ")
                                   , S(":]")
                                   ]

  is-unknown-FCT =
    ?T-int(_)

  unknown-get-indent :
    (t@T-int(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@T-int(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@T-int(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT-Quoted :
    L-id(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , t1__'
                    )
                  ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-L-id)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   ]

  is-unknown-FCT-Quoted =
    ?L-id(_)

  unknown-get-indent :
    (t@L-id(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT-Quoted"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@L-id(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT-Quoted"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@L-id(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT-Quoted"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    T-id(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , t1__'
                    )
                  ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ S("id")
                                   , S(" ")
                                   , S("[:")
                                   , S(" ")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-L-id)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S(" ")
                                   , S(":]")
                                   ]

  is-unknown-FCT =
    ?T-id(_)

  unknown-get-indent :
    (t@T-id(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@T-id(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@T-id(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  is-unknown-FCT-Quoted =
    fail

  is-unknown-FCT =
    fail

  prettyprint-unknown-FCT-Quoted :
    amb([h|hs]) -> <prettyprint-unknown-FCT-Quoted> h

  prettyprint-unknown-FCT :
    amb([h|hs]) -> <prettyprint-unknown-FCT> h

  prettyprint-unknown-L-start :
    L-start-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[L-start]]")]
                         )
                       ]

  is-unknown-L-start =
    ?L-start-Plhdr()

  prettyprint-unknown-L-exp :
    L-exp-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[L-exp]]")]
                       )
                     ]

  is-unknown-L-exp =
    ?L-exp-Plhdr()

  prettyprint-unknown-L-int :
    L-int-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[L-int]]")]
                       )
                     ]

  is-unknown-L-int =
    ?L-int-Plhdr()

  prettyprint-unknown-FCT-Quoted :
    FCT-Quoted-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[FCT-Quoted]]")]
                            )
                          ]

  is-unknown-FCT-Quoted =
    ?FCT-Quoted-Plhdr()

  prettyprint-unknown-FCT :
    FCT-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[FCT]]")]
                     )
                   ]

  is-unknown-FCT =
    ?FCT-Plhdr()

  prettyprint-unknown-L-id :
    L-id-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[L-id]]")]
                      )
                    ]

  is-unknown-L-id =
    ?L-id-Plhdr()

  prettyprint-unknown-L-start :
    L-start-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[L-start]]")]
                          )
                        ]

  is-unknown-L-start =
    ?L-start-Plhdr(_)

  prettyprint-unknown-L-exp :
    L-exp-Plhdr(_) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[L-exp]]")]
                        )
                      ]

  is-unknown-L-exp =
    ?L-exp-Plhdr(_)

  prettyprint-unknown-L-int :
    L-int-Plhdr(_) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[L-int]]")]
                        )
                      ]

  is-unknown-L-int =
    ?L-int-Plhdr(_)

  prettyprint-unknown-FCT-Quoted :
    FCT-Quoted-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("[[FCT-Quoted]]")]
                             )
                           ]

  is-unknown-FCT-Quoted =
    ?FCT-Quoted-Plhdr(_)

  prettyprint-unknown-FCT :
    FCT-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[FCT]]")]
                      )
                    ]

  is-unknown-FCT =
    ?FCT-Plhdr(_)

  prettyprint-unknown-L-id :
    L-id-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[L-id]]")]
                       )
                     ]

  is-unknown-L-id =
    ?L-id-Plhdr(_)