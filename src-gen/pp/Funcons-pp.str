module pp/Funcons-pp

imports
  libstratego-gpp
  libspoofax/sdf/pp
  libspoofax/term/origin
  libspoofax/term/annotation
  libstratego-sglr
  libstratego-sglr
  signatures/Funcons-sig


strategies
  prettyprint-example =
    prettyprint-unknown

  prettyprint-unknown =
    fail

  prettyprint-unknown(|sort) =
    fail


strategies
  prettyprint-SDF-start-symbols =
    prettyprint-unknown-start-symbols

  prettyprint-unknown-start-symbols =
    fail


strategies
  prettyprint-unknown-start-symbols =
    prettyprint-unknown-Start


strategies
  prettyprint-unknown =
    prettyprint-unknown-Start

  prettyprint-unknown =
    prettyprint-unknown-FCT-SEQ

  prettyprint-unknown =
    prettyprint-unknown-FCT

  prettyprint-unknown =
    prettyprint-unknown-FCT-POINT

  prettyprint-unknown =
    prettyprint-unknown-FCT-Quoted

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-Start>
    where <?"Start"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-FCT-SEQ>
    where <?"FCT-SEQ"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-FCT>
    where <?"FCT"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-FCT-POINT>
    where <?"FCT-POINT"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-FCT-Quoted>
    where <?"FCT-Quoted"> sort

  prettyprint-unknown-Start :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , t1__'
              )
            ]
    where not(is-unknown-Start)
    where t1__' := <clean-layout-empty-symbols(
                    | ""
                    , FALSE()
                    , FALSE()
                    )
                    ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                       <+ pp-one-V(prettyprint-unknown-FCT)
                                       <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                    ]

  prettyprint-unknown-FCT-SEQ :
    FCTSequence(t1__, t2__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , t1__'
                                 )
                               , H(
                                   [SOpt(HS(), "0")]
                                 , t2__'
                                 )
                               ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT-SEQ)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S(",")
                                   ]
    with t2__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT-SEQ)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t2__
                                   ]

  is-unknown-FCT-SEQ =
    ?FCTSequence(_, _)

  unknown-get-indent :
    (t@FCTSequence(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT-SEQ"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTSequence(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT-SEQ"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTSequence(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT-SEQ"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := "\n"
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT-SEQ :
    FCTEmpty() -> [ H(
                      []
                    , [S("")]
                    )
                  ]

  is-unknown-FCT-SEQ =
    ?FCTEmpty()

  unknown-get-indent :
    (t@FCTEmpty(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT-SEQ"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTEmpty(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT-SEQ"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTEmpty(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT-SEQ"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  check-nonterminal-isEmpty =
    ?FCTEmpty()

  prettyprint-unknown-FCT-SEQ :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , t1__'
              )
            ]
    where not(is-unknown-FCT-SEQ)
    where t1__' := <clean-layout-empty-symbols(
                    | ""
                    , FALSE()
                    , FALSE()
                    )
                    ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                       <+ pp-one-V(prettyprint-unknown-FCT)
                                       <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                    ]

  prettyprint-unknown-FCT :
    FCTInt(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , t1__'
                      )
                    ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-INT)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   ]

  is-unknown-FCT =
    ?FCTInt(_)

  unknown-get-indent :
    (t@FCTInt(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTInt(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTInt(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTFloat(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , t1__'
                        )
                      ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FLOAT)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   ]

  is-unknown-FCT =
    ?FCTFloat(_)

  unknown-get-indent :
    (t@FCTFloat(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTFloat(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTFloat(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTChar(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , t1__'
                       )
                     ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-CHAR)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   ]

  is-unknown-FCT =
    ?FCTChar(_)

  unknown-get-indent :
    (t@FCTChar(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTChar(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTChar(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTString(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , t1__'
                         )
                       ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-STRING)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   ]

  is-unknown-FCT =
    ?FCTString(_)

  unknown-get-indent :
    (t@FCTString(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTString(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTString(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTDoubleQuoted(t1__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , t1__'
                               )
                             ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ S("\\\"")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT-Quoted)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S("\\\"")
                                   ]

  is-unknown-FCT =
    ?FCTDoubleQuoted(_)

  unknown-get-indent :
    (t@FCTDoubleQuoted(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTDoubleQuoted(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTDoubleQuoted(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTVar(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , t1__'
                      )
                    ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-VAR)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   ]

  is-unknown-FCT =
    ?FCTVar(_)

  unknown-get-indent :
    (t@FCTVar(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTVar(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTVar(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTName(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , t1__'
                       )
                     ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-NAME)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   ]

  is-unknown-FCT =
    ?FCTName(_)

  unknown-get-indent :
    (t@FCTName(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTName(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTName(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTApp(t1__, t2__) -> [ H(
                              [SOpt(HS(), "0")]
                            , t1__'
                            )
                          ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-NAME)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S(" ")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t2__
                                   ]

  is-unknown-FCT =
    ?FCTApp(_, _)

  unknown-get-indent :
    (t@FCTApp(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTApp(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTApp(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTTyped(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , t1__'
                              )
                            ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S(":")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t2__
                                   ]

  is-unknown-FCT =
    ?FCTTyped(_, _)

  unknown-get-indent :
    (t@FCTTyped(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTTyped(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTTyped(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTComplement(t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , t1__'
                             )
                           ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ S("~")
                                   , S(" ")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   ]

  is-unknown-FCT =
    ?FCTComplement(_)

  unknown-get-indent :
    (t@FCTComplement(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTComplement(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTComplement(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTComputes(t1__, t2__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , t1__'
                                 )
                               ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-option(
                                           check-nonterminal-isEmpty ; id
                                           <+ pp-one-V(prettyprint-unknown-FCT)
                                           <+ pp-one-Z(prettyprint-completion-aux)
                                         )> t1__
                                   , S(" ")
                                   , S("=>")
                                   , S(" ")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t2__
                                   ]

  is-unknown-FCT =
    ?FCTComputes(_, _)

  unknown-get-indent :
    (t@FCTComputes(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTComputes(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTComputes(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTPostfix(t1__, t2__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , t1__'
                                )
                              ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-POSTFIX)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t2__
                                   ]

  is-unknown-FCT =
    ?FCTPostfix(_, _)

  unknown-get-indent :
    (t@FCTPostfix(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTPostfix(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTPostfix(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTUnion(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , t1__'
                              )
                            ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S(" ")
                                   , S("|")
                                   , S(" ")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-H-list(prettyprint-unknown-FCT|" | ")
                                      <+ pp-one-Z(prettyprint-completion-aux)> t2__
                                   ]

  is-unknown-FCT =
    ?FCTUnion(_, _)

  unknown-get-indent :
    (t@FCTUnion(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTUnion(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := " | "
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTUnion(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTIntersect(t1__, t2__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , t1__'
                                  )
                                ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S(" ")
                                   , S("&")
                                   , S(" ")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-H-list(prettyprint-unknown-FCT|" & ")
                                      <+ pp-one-Z(prettyprint-completion-aux)> t2__
                                   ]

  is-unknown-FCT =
    ?FCTIntersect(_, _)

  unknown-get-indent :
    (t@FCTIntersect(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTIntersect(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := " & "
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTIntersect(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTGroup(t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , t1__'
                        )
                      ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ S("(")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT-SEQ)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S(")")
                                   ]

  is-unknown-FCT =
    ?FCTGroup(_)

  unknown-get-indent :
    (t@FCTGroup(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTGroup(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTGroup(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTList(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , t1__'
                       )
                     ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ S("[")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT-SEQ)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S("]")
                                   ]

  is-unknown-FCT =
    ?FCTList(_)

  unknown-get-indent :
    (t@FCTList(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTList(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTList(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTSet(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , t1__'
                      )
                    ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ S("{")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT-SEQ)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S("}")
                                   ]

  is-unknown-FCT =
    ?FCTSet(_)

  unknown-get-indent :
    (t@FCTSet(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTSet(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTSet(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT :
    FCTMap(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , t1__'
                      )
                    ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ S("{")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-V-list(prettyprint-unknown-FCT-POINT|"0", ",")
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S("}")
                                   ]

  is-unknown-FCT =
    ?FCTMap(_)

  unknown-get-indent :
    (t@FCTMap(t1__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTMap(t1__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             separator := ",\n"
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTMap(t1__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT"> sort
    with switch !index
           case ?1 :
             ws := ""
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT-POINT :
    Point(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , t1__'
                           )
                         ]
    with t1__' := <clean-layout-empty-symbols(
                   | ""
                   , FALSE()
                   , FALSE()
                   )
                   ; flatten-list> [ <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t1__
                                   , S(" ")
                                   , S("|->")
                                   , S(" ")
                                   , <check-nonterminal-isEmpty ; id
                                      <+ pp-one-V(prettyprint-unknown-FCT)
                                      <+ pp-one-Z(prettyprint-completion-aux)> t2__
                                   ]

  is-unknown-FCT-POINT =
    ?Point(_, _)

  unknown-get-indent :
    (t@Point(t1__, t2__), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT-POINT"> sort
    with switch !index
           case ?1 :
             indent := ""
           case ?2 :
             indent := ""
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@Point(t1__, t2__), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT-POINT"> sort
    with switch !index
           case ?1 :
             separator := ""
           case ?2 :
             separator := ""
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@Point(t1__, t2__), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT-POINT"> sort
    with switch !index
           case ?1 :
             ws := ""
           case ?2 :
             ws := " "
           otherwise :
             ws := ""
         end

  prettyprint-unknown-FCT-Quoted :
    FCTQuotedEmpty() -> [ H(
                            []
                          , [S("")]
                          )
                        ]

  is-unknown-FCT-Quoted =
    ?FCTQuotedEmpty()

  unknown-get-indent :
    (t@FCTQuotedEmpty(), index) -> indent
    where sort := <ia-get-sort> t
          ; <?"FCT-Quoted"> sort
    with switch !index
           otherwise :
             indent := ""
         end

  unknown-get-separator :
    (t@FCTQuotedEmpty(), index) -> separator
    where sort := <ia-get-sort> t
          ; <?"FCT-Quoted"> sort
    with switch !index
           otherwise :
             separator := ""
         end

  unknown-get-leading-ws :
    (t@FCTQuotedEmpty(), index) -> ws
    where sort := <ia-get-sort> t
          ; <?"FCT-Quoted"> sort
    with switch !index
           otherwise :
             ws := ""
         end

  check-nonterminal-isEmpty =
    ?FCTQuotedEmpty()

  is-unknown-Start =
    fail

  is-unknown-FCT-SEQ =
    fail

  is-unknown-FCT =
    fail

  is-unknown-FCT-POINT =
    fail

  is-unknown-FCT-Quoted =
    fail

  prettyprint-unknown-Start :
    amb([h|hs]) -> <prettyprint-unknown-Start> h

  prettyprint-unknown-FCT-SEQ :
    amb([h|hs]) -> <prettyprint-unknown-FCT-SEQ> h

  prettyprint-unknown-FCT :
    amb([h|hs]) -> <prettyprint-unknown-FCT> h

  prettyprint-unknown-FCT-POINT :
    amb([h|hs]) -> <prettyprint-unknown-FCT-POINT> h

  prettyprint-unknown-FCT-Quoted :
    amb([h|hs]) -> <prettyprint-unknown-FCT-Quoted> h

  prettyprint-unknown-Start :
    Start-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[Start]]")]
                       )
                     ]

  is-unknown-Start =
    ?Start-Plhdr()

  prettyprint-unknown-INT :
    INT-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[INT]]")]
                     )
                   ]

  is-unknown-INT =
    ?INT-Plhdr()

  prettyprint-unknown-FLOAT :
    FLOAT-Plhdr() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[FLOAT]]")]
                       )
                     ]

  is-unknown-FLOAT =
    ?FLOAT-Plhdr()

  prettyprint-unknown-CHAR :
    CHAR-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[CHAR]]")]
                      )
                    ]

  is-unknown-CHAR =
    ?CHAR-Plhdr()

  prettyprint-unknown-STRING :
    STRING-Plhdr() -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[STRING]]")]
                        )
                      ]

  is-unknown-STRING =
    ?STRING-Plhdr()

  prettyprint-unknown-VAR :
    VAR-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[VAR]]")]
                     )
                   ]

  is-unknown-VAR =
    ?VAR-Plhdr()

  prettyprint-unknown-NAME :
    NAME-Plhdr() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[NAME]]")]
                      )
                    ]

  is-unknown-NAME =
    ?NAME-Plhdr()

  prettyprint-unknown-POSTFIX :
    POSTFIX-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[POSTFIX]]")]
                         )
                       ]

  is-unknown-POSTFIX =
    ?POSTFIX-Plhdr()

  prettyprint-unknown-FCT-SEQ :
    FCT-SEQ-Plhdr() -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[FCT-SEQ]]")]
                         )
                       ]

  is-unknown-FCT-SEQ =
    ?FCT-SEQ-Plhdr()

  prettyprint-unknown-FCT-POINT :
    FCT-POINT-Plhdr() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("[[FCT-POINT]]")]
                           )
                         ]

  is-unknown-FCT-POINT =
    ?FCT-POINT-Plhdr()

  prettyprint-unknown-FCT :
    FCT-Plhdr() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("[[FCT]]")]
                     )
                   ]

  is-unknown-FCT =
    ?FCT-Plhdr()

  prettyprint-unknown-FCT-Quoted :
    FCT-Quoted-Plhdr() -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[FCT-Quoted]]")]
                            )
                          ]

  is-unknown-FCT-Quoted =
    ?FCT-Quoted-Plhdr()

  prettyprint-unknown-Start :
    Start-Plhdr(_) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[Start]]")]
                        )
                      ]

  is-unknown-Start =
    ?Start-Plhdr(_)

  prettyprint-unknown-INT :
    INT-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[INT]]")]
                      )
                    ]

  is-unknown-INT =
    ?INT-Plhdr(_)

  prettyprint-unknown-FLOAT :
    FLOAT-Plhdr(_) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("[[FLOAT]]")]
                        )
                      ]

  is-unknown-FLOAT =
    ?FLOAT-Plhdr(_)

  prettyprint-unknown-CHAR :
    CHAR-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[CHAR]]")]
                       )
                     ]

  is-unknown-CHAR =
    ?CHAR-Plhdr(_)

  prettyprint-unknown-STRING :
    STRING-Plhdr(_) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("[[STRING]]")]
                         )
                       ]

  is-unknown-STRING =
    ?STRING-Plhdr(_)

  prettyprint-unknown-VAR :
    VAR-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[VAR]]")]
                      )
                    ]

  is-unknown-VAR =
    ?VAR-Plhdr(_)

  prettyprint-unknown-NAME :
    NAME-Plhdr(_) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("[[NAME]]")]
                       )
                     ]

  is-unknown-NAME =
    ?NAME-Plhdr(_)

  prettyprint-unknown-POSTFIX :
    POSTFIX-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[POSTFIX]]")]
                          )
                        ]

  is-unknown-POSTFIX =
    ?POSTFIX-Plhdr(_)

  prettyprint-unknown-FCT-SEQ :
    FCT-SEQ-Plhdr(_) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("[[FCT-SEQ]]")]
                          )
                        ]

  is-unknown-FCT-SEQ =
    ?FCT-SEQ-Plhdr(_)

  prettyprint-unknown-FCT-POINT :
    FCT-POINT-Plhdr(_) -> [ H(
                              [SOpt(HS(), "0")]
                            , [S("[[FCT-POINT]]")]
                            )
                          ]

  is-unknown-FCT-POINT =
    ?FCT-POINT-Plhdr(_)

  prettyprint-unknown-FCT :
    FCT-Plhdr(_) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("[[FCT]]")]
                      )
                    ]

  is-unknown-FCT =
    ?FCT-Plhdr(_)

  prettyprint-unknown-FCT-Quoted :
    FCT-Quoted-Plhdr(_) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("[[FCT-Quoted]]")]
                             )
                           ]

  is-unknown-FCT-Quoted =
    ?FCT-Quoted-Plhdr(_)

  prettyprint-unknown-FCT-SEQ :
    FCT-SEQ-Opt-Plhdr() -> [ H(
                               []
                             , [S("")]
                             )
                           ]

  is-unknown-FCT-SEQ =
    ?FCT-SEQ-Opt-Plhdr()

  prettyprint-unknown-FCT :
    FCT-Opt-Plhdr() -> [ H(
                           []
                         , [S("")]
                         )
                       ]

  is-unknown-FCT =
    ?FCT-Opt-Plhdr()

  prettyprint-unknown-FCT-POINT :
    FCT-POINT-Opt-Plhdr() -> [ H(
                                 []
                               , [S("")]
                               )
                             ]

  is-unknown-FCT-POINT =
    ?FCT-POINT-Opt-Plhdr()

  prettyprint-unknown-FCT-Quoted :
    FCT-Quoted-Opt-Plhdr() -> [ H(
                                  []
                                , [S("")]
                                )
                              ]

  is-unknown-FCT-Quoted =
    ?FCT-Quoted-Opt-Plhdr()


strategies
  prettyprint-unknown =
    prettyprint-unknown-INT

  prettyprint-unknown =
    prettyprint-unknown-FLOAT

  prettyprint-unknown =
    prettyprint-unknown-CHAR

  prettyprint-unknown =
    prettyprint-unknown-STRING

  prettyprint-unknown =
    prettyprint-unknown-STRING-CHAR

  prettyprint-unknown =
    prettyprint-unknown-BACKSLASH

  prettyprint-unknown =
    prettyprint-unknown-NAME

  prettyprint-unknown =
    prettyprint-unknown-VAR

  prettyprint-unknown =
    prettyprint-unknown-SUFFIX

  prettyprint-unknown =
    prettyprint-unknown-POSTFIX

  prettyprint-unknown =
    prettyprint-unknown-STAR

  prettyprint-unknown =
    prettyprint-unknown-EOF

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-INT>
    where <?"INT"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-FLOAT>
    where <?"FLOAT"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-CHAR>
    where <?"CHAR"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-STRING>
    where <?"STRING"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-STRING-CHAR>
    where <?"STRING-CHAR"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-BACKSLASH>
    where <?"BACKSLASH"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-NAME>
    where <?"NAME"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-VAR>
    where <?"VAR"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-SUFFIX>
    where <?"SUFFIX"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-POSTFIX>
    where <?"POSTFIX"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-STAR>
    where <?"STAR"> sort

  prettyprint-unknown(|sort):
    t -> <prettyprint-unknown-EOF>
    where <?"EOF"> sort

  prettyprint-unknown-INT =
    ![S(<is-string>)]

  prettyprint-unknown-FLOAT =
    ![S(<is-string>)]

  prettyprint-unknown-CHAR =
    ![S(<is-string>)]

  prettyprint-unknown-STRING =
    ![S(<is-string>)]

  prettyprint-unknown-STRING-CHAR =
    ![S(<is-string>)]

  prettyprint-unknown-BACKSLASH =
    ![S(<is-string>)]

  prettyprint-unknown-NAME =
    ![S(<is-string>)]

  prettyprint-unknown-VAR =
    ![S(<is-string>)]

  prettyprint-unknown-SUFFIX =
    ![S(<is-string>)]

  prettyprint-unknown-POSTFIX =
    ![S(<is-string>)]

  prettyprint-unknown-STAR =
    ![S(<is-string>)]

  prettyprint-unknown-EOF =
    ![S(<is-string>)]

  prettyprint-unknown-INT :
    amb([h|hs]) -> <prettyprint-unknown-INT> h

  prettyprint-unknown-FLOAT :
    amb([h|hs]) -> <prettyprint-unknown-FLOAT> h

  prettyprint-unknown-CHAR :
    amb([h|hs]) -> <prettyprint-unknown-CHAR> h

  prettyprint-unknown-STRING :
    amb([h|hs]) -> <prettyprint-unknown-STRING> h

  prettyprint-unknown-STRING-CHAR :
    amb([h|hs]) -> <prettyprint-unknown-STRING-CHAR> h

  prettyprint-unknown-BACKSLASH :
    amb([h|hs]) -> <prettyprint-unknown-BACKSLASH> h

  prettyprint-unknown-NAME :
    amb([h|hs]) -> <prettyprint-unknown-NAME> h

  prettyprint-unknown-VAR :
    amb([h|hs]) -> <prettyprint-unknown-VAR> h

  prettyprint-unknown-SUFFIX :
    amb([h|hs]) -> <prettyprint-unknown-SUFFIX> h

  prettyprint-unknown-POSTFIX :
    amb([h|hs]) -> <prettyprint-unknown-POSTFIX> h

  prettyprint-unknown-STAR :
    amb([h|hs]) -> <prettyprint-unknown-STAR> h

  prettyprint-unknown-EOF :
    amb([h|hs]) -> <prettyprint-unknown-EOF> h