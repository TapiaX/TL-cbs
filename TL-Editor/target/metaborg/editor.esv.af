Module(
  "editor"
, Imports(
    [Import("Menus"), Import("Syntax"), Import("Analysis"), Import("Refactoring")]
  )
, [ Language(
      ""
    , [Extensions(Values(["tl"])), SemanticProvider("target/metaborg/stratego.ctree"), SemanticProvider("target/metaborg/stratego.jar")]
    )
  , Menus(
      [ ToolbarMenu(
          Label(String("\"Generation\""))
        , [OpenEditor(), RealTime()]
        , [Action(String("\"Generate Funcons\""), Strategy("generate-fct"), [])]
        )
      ]
    )
  , Language(
      ""
    , [ Table("target/metaborg/sdf.tbl")
      , StartSymbols([Sort("Start")])
      , LineCommentPrefix(String("\"//\""))
      , BlockCommentDefs(BlockCommentDef(String("\"/*\""), "*", String("\"*/\"")))
      , FenceDefs(
          [FenceDef("[", "]"), FenceDef("(", ")"), FenceDef("{", "}")]
        )
      ]
    )
  , Menus(
      [ ToolbarMenu(
          Label(String("\"Syntax\""))
        , [OpenEditor()]
        , [ Action(String("\"Format\""), Strategy("editor-format"), [Source()])
          , Action(String("\"Show parsed AST\""), Strategy("debug-show-aterm"), [Source()])
          ]
        )
      ]
    )
  , Views(
      [OutlineView(Strategy("editor-outline"), [Source()], Some(ExpandToLevel("3")))]
    )
  , Colorer(
      " "
    , [ ColorRule(
          Token(TK_KEYWORD())
        , Attribute(ColorRGB("127", "0", "85"), NoColor(), BOLD())
        )
      , ColorRule(Token(TK_IDENTIFIER()), Attribute(ColorDefault(), NoColor(), NORMAL()))
      , ColorRule(
          Token(TK_STRING())
        , Attribute(ColorRGB("0", "0", "255"), NoColor(), NORMAL())
        )
      , ColorRule(
          Token(TK_NUMBER())
        , Attribute(ColorRGB("0", "128", "0"), NoColor(), NORMAL())
        )
      , ColorRule(
          Token(TK_VAR())
        , Attribute(ColorRGB("139", "69", "19"), NoColor(), ITALIC())
        )
      , ColorRule(
          Token(TK_OPERATOR())
        , Attribute(ColorRGB("0", "0", "128"), NoColor(), NORMAL())
        )
      , ColorRule(
          Token(TK_LAYOUT())
        , Attribute(ColorRGB("63", "127", "95"), NoColor(), ITALIC())
        )
      ]
    )
  , Colorer(
      ""
    , [ ColorDef(
          "darkred"
        , Attribute(ColorRGB("128", "0", "0"), NoColor(), NORMAL())
        )
      , ColorDef(
          "red"
        , Attribute(ColorRGB("255", "0", "0"), NoColor(), NORMAL())
        )
      , ColorDef(
          "darkgreen"
        , Attribute(ColorRGB("0", "128", "0"), NoColor(), NORMAL())
        )
      , ColorDef(
          "green"
        , Attribute(ColorRGB("0", "255", "0"), NoColor(), NORMAL())
        )
      , ColorDef(
          "darkblue"
        , Attribute(ColorRGB("0", "0", "128"), NoColor(), NORMAL())
        )
      , ColorDef(
          "blue"
        , Attribute(ColorRGB("0", "0", "255"), NoColor(), NORMAL())
        )
      , ColorDef(
          "cyan"
        , Attribute(ColorRGB("0", "255", "255"), NoColor(), NORMAL())
        )
      , ColorDef(
          "magenta"
        , Attribute(ColorRGB("255", "0", "255"), NoColor(), NORMAL())
        )
      , ColorDef(
          "yellow"
        , Attribute(ColorRGB("255", "255", "0"), NoColor(), NORMAL())
        )
      , ColorDef(
          "white"
        , Attribute(ColorRGB("255", "255", "255"), NoColor(), NORMAL())
        )
      , ColorDef(
          "black"
        , Attribute(ColorRGB("0", "0", "0"), NoColor(), NORMAL())
        )
      , ColorDef(
          "gray"
        , Attribute(ColorRGB("128", "128", "128"), NoColor(), NORMAL())
        )
      , ColorDef(
          "grey"
        , Attribute(ColorRGB("128", "128", "128"), NoColor(), NORMAL())
        )
      , ColorDef(
          "orange"
        , Attribute(ColorRGB("255", "165", "0"), NoColor(), NORMAL())
        )
      , ColorDef(
          "pink"
        , Attribute(ColorRGB("255", "105", "180"), NoColor(), NORMAL())
        )
      , ColorDef(
          "brown"
        , Attribute(ColorRGB("139", "69", "19"), NoColor(), NORMAL())
        )
      , ColorDef("default", Attribute(ColorDefault(), NoColor(), NORMAL()))
      ]
    )
  , Colorer(
      ""
    , [ ColorRule(ConstructorOnly(Constructor("Start-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-start-Plhdr")), AttributeRef("gray"))
      ]
    )
  , Colorer(
      ""
    , [ ColorRule(ConstructorOnly(Constructor("L-start-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-pgm-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-start-Plhdr")), AttributeRef("gray"))
      ]
    )
  , Colorer(
      ""
    , [ ColorRule(ConstructorOnly(Constructor("L-int-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("LEX-int-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-id-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("LEX-id-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-bool-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("LEX-bool-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-keyword-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("LEX-keyword-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-int-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-id-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-bool-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-Quoted-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("LEX-keyword-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-aexp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-bexp-Plhdr")), AttributeRef("gray"))
      ]
    )
  , Colorer(
      ""
    , [ ColorRule(ConstructorOnly(Constructor("L-id-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-int-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-bool-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-aexp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-exp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-bexp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-exp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-aexp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-bexp-Plhdr")), AttributeRef("gray"))
      ]
    )
  , Colorer(
      ""
    , [ ColorRule(ConstructorOnly(Constructor("Start-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("INT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FLOAT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("CHAR-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("STRING-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("VAR-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("NAME-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("POSTFIX-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-SEQ-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-POINT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-Quoted-Plhdr")), AttributeRef("gray"))
      ]
    )
  , Colorer(
      ""
    , [ ColorRule(ConstructorOnly(Constructor("Start-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("INT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FLOAT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("CHAR-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("STRING-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("VAR-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("NAME-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("POSTFIX-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-SEQ-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-POINT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-Quoted-Plhdr")), AttributeRef("gray"))
      ]
    )
  , Colorer(
      ""
    , [ ColorRule(ConstructorOnly(Constructor("L-id-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-int-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-bool-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-aexp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-exp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-bexp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-exp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-aexp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-bexp-Plhdr")), AttributeRef("gray"))
      ]
    )
  , Colorer(
      ""
    , [ ColorRule(ConstructorOnly(Constructor("L-id-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-aexp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-exp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-bexp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-block-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-stmt-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-stmt-Plhdr")), AttributeRef("gray"))
      ]
    )
  , Colorer(
      ""
    , [ ColorRule(ConstructorOnly(Constructor("L-stmt-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-pgm-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-exp-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-id-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-COMMA-L-idlist-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-idlist-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-pgm-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-SEQ-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("L-idlist-Plhdr")), AttributeRef("gray"))
      ]
    )
  , Colorer(
      ""
    , [ ColorRule(ConstructorOnly(Constructor("Start-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("INT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FLOAT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("CHAR-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("STRING-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("VAR-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("NAME-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("POSTFIX-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-SEQ-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-POINT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-Plhdr")), AttributeRef("gray"))
      , ColorRule(ConstructorOnly(Constructor("FCT-Quoted-Plhdr")), AttributeRef("gray"))
      ]
    )
  , Language("", [SemanticObserver(Strategy("editor-analyze"), [Constraint()])])
  , Menus(
      [ ToolbarMenu(
          Label(String("\"NaBL2 Analysis\""))
        , [Meta(), OpenEditor()]
        , [ Action(String("\"Debug file constraints\""), Strategy("nabl2--debug-file-constraints"), [RealTime()])
          , Action(String("\"Debug file scope graph\""), Strategy("nabl2--debug-file-scope-graph"), [RealTime()])
          , Action(String("\"Debug file scope graph (DOT)\""), Strategy("nabl2--debug-file-scope-graph-dot"), [RealTime()])
          , Action(String("\"Debug file name resolution\""), Strategy("nabl2--debug-file-name-resolution"), [RealTime()])
          , Action(String("\"Debug file unifier\""), Strategy("nabl2--debug-file-unifier"), [RealTime()])
          , Action(String("\"Debug file symbolic constraints\""), Strategy("nabl2--debug-file-symbolic-constraints"), [])
          , Action(String("\"Debug file ast properties\""), Strategy("nabl2--debug-file-ast-properties"), [])
          , Separator()
          , Action(String("\"Debug project constraints\""), Strategy("nabl2--debug-project-constraints"), [RealTime()])
          , Action(String("\"Debug project scope graph\""), Strategy("nabl2--debug-project-scope-graph"), [RealTime()])
          , Action(String("\"Debug project scope graph (DOT)\""), Strategy("nabl2--debug-project-scope-graph-dot"), [RealTime()])
          , Action(String("\"Debug project name resolution\""), Strategy("nabl2--debug-project-name-resolution"), [RealTime()])
          , Action(String("\"Debug project unifier\""), Strategy("nabl2--debug-project-unifier"), [RealTime()])
          , Action(String("\"Debug project ast properties\""), Strategy("nabl2--debug-project-ast-properties"), [])
          ]
        )
      ]
    )
  , References(
      ""
    , [ReferenceRule("_", Strategy("nabl2--editor-resolve")), HoverRule("_", Strategy("nabl2--editor-hover"))]
    )
  , Menus(
      [ ToolbarMenu(
          Label(String("\"Refactoring\""))
        , []
        , [Action(String("\"Rename\""), Strategy("rename-menu-action"), [])]
        )
      ]
    )
  ]
)