Module("nabl2/runtime/analysis/generation",[Imports([Import("nabl2/api"),Import("libspoofax/editor/completion/interface"),ImportWildcard("signatures/nabl2/shared/common"),ImportWildcard("signatures/nabl2/shared/constraints"),ImportWildcard("nabl2/shared"),ImportWildcard("signatures/nabl2/runtime/common"),ImportWildcard("nabl2/runtime/analysis"),ImportWildcard("nabl2/runtime/prelude"),Import("nabl2/runtime/pp")]),Signature([Constructors([OpDecl("Params",FunType([ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("Args")))),OpDecl("ParamsAndType",FunType([ConstType(SortNoArgs("Term")),ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("Args")))),OpDecl("CFGParams",FunType([ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("Args")))),OpDecl("CFGParams",ConstType(SortNoArgs("Term")))])]),Rules([SDefNoArgs("nabl2-debug-constraint-generation-hook",Fail),SDefT("nabl2--generate-constraint-init",[],[DefaultVarDec("source")],LChoice(Call(SVar("nabl2--with-fresh"),[Build(NoAnnoList(Str("\"-\""))),Seq(Match(Var("term")),BA(CallT(SVar("nabl2--generate-constraint-init-rule"),[],[]),NoAnnoList(Tuple([Var("source"),Var("term")]))))]),CallT(SVar("fatal-err"),[],[NoAnnoList(Str("\"Cannot find init rule\""))]))),SDefT("nabl2--generate-constraint-file",[],[DefaultVarDec("source"),DefaultVarDec("args")],LChoice(Call(SVar("nabl2--with-fresh"),[Build(NoAnnoList(Str("\"-\""))),Seq(Match(Var("term")),Seq(Assign(Var("nabl2_constraint"),App(CallT(SVar("nabl2--generate-constraint"),[CallNoArgs(SVar("nabl2--generate-constraint-default-rule"))],[NoAnnoList(Str("\"default\""))]),NoAnnoList(Tuple([Var("source"),Var("term"),Var("args")])))),Seq(Assign(Var("flowspec_constraint"),App(CallT(SVar("nabl2-generate-flowspec-constraint"),[],[Var("term")]),NoAnnoList(Tuple([Var("source"),Var("term"),Var("args")])))),Build(NoAnnoList(Op("CConj",[Var("nabl2_constraint"),Var("flowspec_constraint")]))))))]),CallT(SVar("fatal-err"),[],[NoAnnoList(Str("\"Cannot find constraint rule\""))]))),SDefNoArgs("nabl2--generate-constraint-completion",LChoice(Call(SVar("nabl2--with-fresh"),[Build(NoAnnoList(Str("\"-\""))),Seq(Match(NoAnnoList(Tuple([Var("source"),Var("term"),Var("args")]))),BA(CallT(SVar("nabl2--generate-constraint"),[CallNoArgs(SVar("nabl2--generate-constraint-default-rule"))],[NoAnnoList(Str("\"default\""))]),NoAnnoList(Tuple([NoAnnoList(StringQuotation1("                                                                                          ",[StringEscape1("                                                                                          ",Var("source")),QStr("#completion")])),Var("term"),Var("args")]))))]),CallT(SVar("fatal-err"),[],[NoAnnoList(Str("\"Cannot find constraint rule\""))]))),SDefT("nabl2-generate-flowspec-constraint",[],[DefaultVarDec("term")],LChoice(CallNoArgs(SVar("nabl2--generate-constraint-placeholder")),LChoice(CallNoArgs(SVar("nabl2--generate-constraint-default-cfg-rule")),Build(NoAnnoList(Op("CTrue",[App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("term"))]))))))]),Rules([SDefNoArgs("nabl2--custom-default-e-label",Fail),SDefNoArgs("nabl2--custom-default-n-label",Fail),SDefNoArgs("nabl2--default-e-label",LChoice(CallNoArgs(SVar("nabl2--custom-default-e-label")),Build(NoAnnoList(Op("P",[]))))),SDefNoArgs("nabl2--default-n-label",LChoice(CallNoArgs(SVar("nabl2--custom-default-n-label")),Build(NoAnnoList(Op("I",[]))))),RDefT("nabl2--fresh-var",[],[DefaultVarDec("source")],Rule(Var("n"),NoAnnoList(Op("CVar",[Var("source"),Var("n'")])),[WithClause(Assign(Var("n'"),App(CallNoArgs(SVar("nabl2--fresh")),Var("n"))))])),RDefT("nabl2--local-var",[],[DefaultVarDec("source")],RuleNoCond(Var("n"),NoAnnoList(Op("CVar",[Var("source"),Var("n")])))),SDefNoArgs("nabl2--occurrence-index-of",LChoice(CallNoArgs(SVar("nabl2--is-var")),LChoice(CallNoArgs(SVar("nabl2--get-ast-index")),CallT(SVar("fatal-err"),[],[NoAnnoList(Str("\"Occurrence position must be a term or a scope variable\""))]))))]),Rules([SDefNoArgs("nabl2--generate-constraint-init-rule",Fail),SDefT("nabl2--generate-constraint-default-rule",[],[],Fail),SDefT("nabl2--generate-constraint-default-cfg-rule",[],[],Fail),SDefNoArgs("nabl2--transform-occurrences",Fail),SDefT("nabl2--generate-constraint",[DefaultVarDec("s")],[DefaultVarDec("name")],LChoice(CallNoArgs(SVar("nabl2--error-no-index")),LChoice(CallNoArgs(SVar("nabl2--generate-constraint-placeholder")),LChoice(CallNoArgs(SVar("s")),CallT(SVar("nabl2--generate-constraint-missing"),[],[Var("name")]))))),RDefNoArgs("nabl2--error-no-index",Rule(NoAnnoList(Tuple([Var("source"),Var("term"),Var("args")])),Var("constraint"),[WhereClause(BA(Not(CallNoArgs(SVar("nabl2--get-ast-index"))),Var("term"))),WithClause(Seq(Assign(Var("msg"),NoAnnoList(StringQuotation1("                  ",[QStr("Constraint generator traverses over non-AST node "),StringEscape1("                                                                   ",App(CallNoArgs(SVar("pp-NaBL2-Term")),Var("term")))]))),Seq(IfThen(CallNoArgs(SVar("nabl2-debug-constraint-generation-hook")),CallT(SVar("warn"),[],[Var("msg")])),Assign(Var("constraint"),NoAnnoList(Op("CFalse",[NoAnnoList(Op("Message",[NoAnnoList(Op("Error",[])),Var("msg"),NoAnnoList(Op("NoIndex",[]))]))]))))))])),RDefNoArgs("nabl2--generate-constraint-placeholder",Rule(NoAnnoList(Tuple([Var("source"),Var("term"),Var("args")])),App(CallNoArgs(SVar("nabl2--make-cconj")),Var(ListVar("constraint*"))),[WhereClause(BA(CallNoArgs(SVar("is-SDF-placeholder")),Var("term"))),WithClause(Seq(Assign(Var("index"),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("term"))),CondChoice(Assign(NoAnnoList(Op("ParamsAndType",[Var("params"),Var("type")])),Var("args")),Assign(Var(ListVar("constraint*")),NoAnnoList(List([NoAnnoList(Op("CAstProperty",[Var("index"),NoAnnoList(Op("Params",[])),Var("params")])),NoAnnoList(Op("CAstProperty",[Var("index"),NoAnnoList(Op("Type",[])),Var("type")]))]))),IfThen(Assign(NoAnnoList(Op("Params",[Var("params")])),Var("args")),Assign(Var(ListVar("constraint*")),NoAnnoList(List([NoAnnoList(Op("CAstProperty",[Var("index"),NoAnnoList(Op("Params",[])),Var("params")]))])))))))])),RDefT("nabl2--generate-constraint-missing",[],[DefaultVarDec("name")],Rule(NoAnnoList(Tuple([Var("source"),Var("term"),Var("args")])),App(CallNoArgs(SVar("nabl2--make-cconj")),NoAnnoList(List([Var(ListVar("ast-constraint*")),Var("constraint")]))),[WithClause(Seq(Assign(Var("index"),App(CallNoArgs(SVar("nabl2--get-ast-index")),Var("term"))),CondChoice(Assign(NoAnnoList(Op("ParamsAndType",[Var("params"),Var("type")])),Var("args")),Seq(Assign(Var(ListVar("ast-constraint*")),NoAnnoList(List([NoAnnoList(Op("CAstProperty",[Var("index"),NoAnnoList(Op("Params",[])),Var("params")])),NoAnnoList(Op("CAstProperty",[Var("index"),NoAnnoList(Op("Type",[])),Var("type")]))]))),Seq(Assign(Var("msg"),NoAnnoList(StringQuotation2("                    ",[QStr("Missing constraint generation rule: "),StringEscape2("                                                        ",Var("name")),QStr(" [[ "),StringEscape2("                                                                  ",App(CallNoArgs(SVar("nabl2--pp-flat-term")),Var("term"))),QStr(" "),StringEscape2("                                                                                               ",App(CallNoArgs(SVar("nabl2--pp-flat-args")),Var("args"))),QStr(" ]]")]))),Seq(IfThen(CallNoArgs(SVar("nabl2-debug-constraint-generation-hook")),CallT(SVar("warn"),[],[Var("msg")])),Assign(Var("constraint"),NoAnnoList(Op("CFalse",[NoAnnoList(Op("Message",[NoAnnoList(Op("Warning",[])),Var("msg"),Var("index")]))])))))),CondChoice(Assign(NoAnnoList(Op("Params",[Var("params")])),Var("args")),Seq(Assign(Var(ListVar("ast-constraint*")),NoAnnoList(List([NoAnnoList(Op("CAstProperty",[Var("index"),NoAnnoList(Op("Params",[])),Var("params")]))]))),Seq(Assign(Var("msg"),NoAnnoList(StringQuotation2("                    ",[QStr("Missing constraint generation rule: "),StringEscape2("                                                        ",Var("name")),QStr(" [[ "),StringEscape2("                                                                  ",App(CallNoArgs(SVar("nabl2--pp-flat-term")),Var("term"))),QStr(" "),StringEscape2("                                                                                               ",App(CallNoArgs(SVar("nabl2--pp-flat-args")),Var("args"))),QStr(" ]]")]))),Seq(IfThen(CallNoArgs(SVar("nabl2-debug-constraint-generation-hook")),CallT(SVar("warn"),[],[Var("msg")])),Assign(Var("constraint"),NoAnnoList(Op("CFalse",[NoAnnoList(Op("Message",[NoAnnoList(Op("Warning",[])),Var("msg"),Var("index")]))])))))),IfThen(Assign(NoAnnoList(Op("CFGParams",[Var("params")])),Var("args")),Seq(Assign(Var(ListVar("ast-constraint*")),NoAnnoList(List([NoAnnoList(Op("CAstProperty",[Var("index"),NoAnnoList(Op("CFGParams",[])),Var("params")]))]))),Seq(Assign(Var("msg"),NoAnnoList(StringQuotation2("                    ",[QStr("Missing flowspec cfg rule: "),StringEscape2("                                               ",Var("name")),QStr(" "),StringEscape2("                                                      ",App(CallNoArgs(SVar("nabl2--pp-flat-term")),Var("term")))]))),Seq(CallT(SVar("warn"),[],[Var("msg")]),Assign(Var("constraint"),NoAnnoList(Op("CFalse",[NoAnnoList(Op("Message",[NoAnnoList(Op("Warning",[])),Var("msg"),Var("index")]))])))))))))))]))]),Rules([RDefNoArgs("nabl2--pp-flat-term",Rule(NoAnnoList(Explode(Var("c"),Var(ListVar("a*")))),NoAnnoList(StringQuotation1("                                   ",[StringEscape1("                                   ",Var("c")),QStr("("),StringEscape1("                                       ",Var("as")),QStr(")")])),[WhereClause(Not(CallNoArgs(SVar("is-list")))),WithClause(Assign(Var("as"),App(Seq(Call(SVar("map"),[Build(NoAnnoList(Str("\"_\"")))]),Seq(CallT(SVar("separate-by"),[],[NoAnnoList(Str("\",\""))]),CallNoArgs(SVar("concat-strings")))),Var(ListVar("a*")))))])),RDefNoArgs("nabl2--pp-flat-term",Rule(NoAnnoList(Explode(Var("c"),Var(ListVar("a*")))),NoAnnoList(StringQuotation2("                                   ",[QStr("["),StringEscape2("                                    ",Var("as")),QStr("]")])),[WhereClause(CallNoArgs(SVar("is-list"))),WithClause(Assign(Var("as"),App(Seq(Call(SVar("map"),[Build(NoAnnoList(Str("\"_\"")))]),Seq(CallT(SVar("separate-by"),[],[NoAnnoList(Str("\",\""))]),CallNoArgs(SVar("concat-strings")))),Var(ListVar("a*")))))])),RDefNoArgs("nabl2--pp-flat-args",Rule(NoAnnoList(Op("Params",[Var(ListVar("a*"))])),NoAnnoList(StringQuotation1("                                       ",[QStr("^ ("),StringEscape1("                                          ",Var("p")),QStr(")")])),[WithClause(CondChoice(BA(CallNoArgs(SVar("is-tuple")),Var(ListVar("a*"))),Assign(Var("p"),App(Seq(CallNoArgs(SVar("TupleToList")),Seq(Call(SVar("map"),[Build(NoAnnoList(Str("\"_\"")))]),Seq(CallT(SVar("separate-by"),[],[NoAnnoList(Str("\",\""))]),CallNoArgs(SVar("concat-strings"))))),Var(ListVar("a*")))),Assign(Var("p"),NoAnnoList(Str("\"_\"")))))])),RDefNoArgs("nabl2--pp-flat-args",Rule(NoAnnoList(Op("ParamsAndType",[Var(ListVar("a*")),Wld])),NoAnnoList(StringQuotation1("                                                ",[StringEscape1("                                                ",Var("p")),QStr(" : _")])),[WithClause(Assign(Var("p"),App(CallNoArgs(SVar("nabl2--pp-flat-args")),NoAnnoList(Op("Params",[Var(ListVar("a*"))])))))])),RDefNoArgs("nabl2--pp-term-sig",Rule(Var(ListVar("a*")),NoAnnoList(StringQuotation2("                              ",[QStr("["),StringEscape2("                               ",Var("a'")),QStr("]")])),[WhereClause(CallNoArgs(SVar("is-list"))),WithClause(Assign(Var("a'"),App(Seq(Call(SVar("map"),[CallNoArgs(SVar("nabl2--pp-term-sig"))]),Seq(CallT(SVar("separate-by"),[],[NoAnnoList(Str("\",\""))]),CallNoArgs(SVar("concat-strings")))),Var(ListVar("a*")))))])),RDefNoArgs("nabl2--pp-term-sig",Rule(NoAnnoList(Explode(Var("c"),Var(ListVar("a*")))),NoAnnoList(StringQuotation1("                                  ",[StringEscape1("                                  ",Var("c")),QStr("("),StringEscape1("                                      ",Var("a'")),QStr(")")])),[WhereClause(Not(CallNoArgs(SVar("is-list")))),WithClause(Assign(Var("a'"),App(Seq(Call(SVar("map"),[Build(NoAnnoList(Str("\"_\"")))]),Seq(CallT(SVar("separate-by"),[],[NoAnnoList(Str("\",\""))]),CallNoArgs(SVar("concat-strings")))),Var(ListVar("a*")))))]))])])