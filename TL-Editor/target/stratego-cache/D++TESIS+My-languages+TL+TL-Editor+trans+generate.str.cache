Module("generate",[Imports([Import("libstratego-gpp"),ImportWildcard("signatures"),Import("pp/TL-parenthesize"),Import("pp/TL-pp"),Import("pp/Funcons-pp-pp"),Import("cbs-gen/TL-Start")]),Rules([RDefNoArgs("generate-fct",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("filename"),Var("result")])),[WhereClause(BA(Not(CallT(SVar("has-extension"),[],[NoAnnoList(Str("\"fct\""))])),App(CallNoArgs(SVar("debug")),Var("path")))),WithClause(Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"fct\""))]),Var("path"))),Seq(Assign(Var("funcons"),App(CallNoArgs(SVar("to-funcons-top")),Var("selected"))),Assign(Var("result"),App(CallNoArgs(SVar("prettyprint-TL-string")),Var("funcons"))))))])),RDefNoArgs("generate-fct",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Op("None",[])),BA(CallT(SVar("has-extension"),[],[NoAnnoList(Str("\"fct\""))]),Var("path")))),SDefNoArgs("prettyprint-TL-string",Seq(CallNoArgs(SVar("parenthesize-TL")),Seq(CallNoArgs(SVar("prettyprint-TL-Start")),Seq(Build(NoAnnoList(Op("V",[NoAnnoList(List([])),RootApp(Id)]))),CallT(SVar("box2text-string"),[],[NoAnnoList(Int("80"))]))))),RDefNoArgs("to-funcons-start",RuleNoCond(Var("START"),NoAnnoList(Op("T-start",[Var("START")])))),SDefNoArgs("to-funcons-top",Seq(CallNoArgs(SVar("to-funcons-start")),Seq(Call(SVar("innermost"),[LChoice(CallNoArgs(SVar("to-desugared")),LChoice(CallNoArgs(SVar("to-funcons")),CallNoArgs(SVar("to-funcons-default"))))]),Seq(Call(SVar("bottomup"),[Call(SVar("try"),[CallNoArgs(SVar("to-funcons-lex"))])]),Seq(Call(SVar("innermost"),[LChoice(CallNoArgs(SVar("to-funcons-sequences")),CallNoArgs(SVar("to-funcons-groups")))]),Call(SVar("innermost"),[CallNoArgs(SVar("to-funcons-apps"))])))))),SDefNoArgs("to-funcons",Fail),SDefNoArgs("to-funcons-default",Fail),SDefNoArgs("to-desugared",Fail)]),Rules([RDefNoArgs("to-funcons-sequences",RuleNoCond(NoAnnoList(Op("FCTSequence",[NoAnnoList(Op("FCTEmpty",[])),Var("seq")])),Var("seq"))),RDefNoArgs("to-funcons-sequences",RuleNoCond(NoAnnoList(Op("FCTSequence",[Var("seq"),NoAnnoList(Op("FCTEmpty",[]))])),Var("seq"))),RDefNoArgs("to-funcons-sequences",RuleNoCond(NoAnnoList(Op("FCTApp",[NoAnnoList(Str("\"sequential\"")),NoAnnoList(Op("FCTGroup",[NoAnnoList(Op("FCTSequence",[Var("fct"),NoAnnoList(Op("FCTApp",[NoAnnoList(Str("\"sequential\"")),NoAnnoList(Op("FCTGroup",[Var("seq")]))]))]))]))])),NoAnnoList(Op("FCTApp",[NoAnnoList(Str("\"sequential\"")),NoAnnoList(Op("FCTGroup",[NoAnnoList(Op("FCTSequence",[Var("fct"),Var("seq")]))]))])))),RDefNoArgs("to-funcons-groups",RuleNoCond(NoAnnoList(Op("FCTGroup",[NoAnnoList(Op("FCTGroup",[Var("seq")]))])),NoAnnoList(Op("FCTGroup",[Var("seq")])))),RDefNoArgs("to-funcons-apps",RuleNoCond(NoAnnoList(Op("FCTApp",[Var("f1"),NoAnnoList(Op("FCTApp",[Var("f2"),Var("fct")]))])),NoAnnoList(Op("FCTAppComp",[NoAnnoList(List([Var("f1"),Var("f2")])),Var("fct")])))),RDefNoArgs("to-funcons-apps",RuleNoCond(NoAnnoList(Op("FCTApp",[Var("f"),NoAnnoList(Op("FCTAppComp",[Var("fs"),Var("fct")]))])),NoAnnoList(Op("FCTAppComp",[NoAnnoList(ListTail([Var("f")],Var("fs"))),Var("fct")])))),RDefNoArgs("to-funcons-apps",RuleNoCond(NoAnnoList(Op("FCTApp",[Var("f"),NoAnnoList(Op("FCTGroup",[Var("seq")]))])),NoAnnoList(Op("FCTAppComp",[NoAnnoList(List([Var("f")])),NoAnnoList(Op("FCTGroup",[Var("seq")]))]))))]),Rules([RDefNoArgs("to-funcons-lex",RuleNoCond(NoAnnoList(Op("FCTString",[Var("str")])),NoAnnoList(Op("FCTString",[App(CallNoArgs(SVar("double-quote")),Var("str"))])))),SDefNoArgs("to-funcons-lex",Match(NoAnnoList(Op("FCTInt",[Wld])))),SDefNoArgs("to-funcons-lex",Match(NoAnnoList(Op("FCTChar",[Wld])))),RDefNoArgs("to-funcons-lex",RuleNoCond(NoAnnoList(Op("FCTApp",[NoAnnoList(Str("\"integer-add\"")),NoAnnoList(Op("FCTGroup",[NoAnnoList(Op("FCTSequence",[NoAnnoList(Op("FCTInt",[Var("s")])),NoAnnoList(Op("FCTInt",[Var("t")]))]))]))])),NoAnnoList(Op("FCTInt",[App(Seq(CallNoArgs(SVar("addi")),CallNoArgs(SVar("int-to-string"))),NoAnnoList(Tuple([App(CallNoArgs(SVar("string-to-int")),Var("s")),App(CallNoArgs(SVar("string-to-int")),Var("t"))])))])))),RDefNoArgs("to-funcons-lex",RuleNoCond(NoAnnoList(Op("FCTApp",[NoAnnoList(Str("\"string-append\"")),NoAnnoList(Op("FCTGroup",[NoAnnoList(Op("FCTSequence",[NoAnnoList(Op("FCTString",[Var("str1")])),NoAnnoList(Op("FCTString",[Var("str2")]))]))]))])),NoAnnoList(Op("FCTString",[App(Seq(CallNoArgs(SVar("concat-strings")),CallNoArgs(SVar("double-quote"))),NoAnnoList(List([App(CallNoArgs(SVar("un-double-quote")),Var("str1")),App(CallNoArgs(SVar("un-double-quote")),Var("str2"))])))])))),RDefNoArgs("to-funcons-lex",RuleNoCond(NoAnnoList(Op("FCTApp",[NoAnnoList(Str("\"string-append\"")),NoAnnoList(Op("FCTGroup",[NoAnnoList(Op("FCTSequence",[NoAnnoList(Op("FCTString",[Var("str1")])),NoAnnoList(Op("FCTSequence",[NoAnnoList(Op("FCTString",[Var("str2")])),NoAnnoList(Op("FCTString",[Var("str3")]))]))]))]))])),NoAnnoList(Op("FCTString",[App(Seq(CallNoArgs(SVar("concat-strings")),CallNoArgs(SVar("double-quote"))),NoAnnoList(List([App(CallNoArgs(SVar("un-double-quote")),Var("str1")),App(CallNoArgs(SVar("un-double-quote")),Var("str2")),App(CallNoArgs(SVar("un-double-quote")),Var("str3"))])))])))),RDefNoArgs("to-funcons-lex",Rule(NoAnnoList(Op("FCTList",[Var("seq")])),NoAnnoList(Op("FCTString",[App(Seq(CallNoArgs(SVar("concat-strings")),CallNoArgs(SVar("double-quote"))),Var("l"))])),Seq(BA(Not(Match(NoAnnoList(Op("FCTEmpty",[])))),Var("seq")),Assign(Var("l"),App(CallNoArgs(SVar("to-funcons-string-list")),NoAnnoList(Tuple([Var("seq"),NoAnnoList(List([]))]))))))),RDefNoArgs("to-funcons-string-list",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("FCTSequence",[Var("seq1"),Var("seq2")])),Var("l")])),App(CallNoArgs(SVar("to-funcons-string-list")),NoAnnoList(Tuple([Var("seq1"),App(CallNoArgs(SVar("to-funcons-string-list")),NoAnnoList(Tuple([Var("seq2"),Var("l")])))]))))),RDefNoArgs("to-funcons-string-list",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("FCTEmpty",[])),Var("l")])),Var("l"))),RDefNoArgs("to-funcons-string-list",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("FCTString",[Var("str")])),Var("l")])),NoAnnoList(ListTail([App(CallNoArgs(SVar("un-single-quote")),Var("str"))],Var("l"))))),RDefNoArgs("to-funcons-string-list",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("FCTApp",[NoAnnoList(Str("\"ascii-character\"")),NoAnnoList(Op("FCTGroup",[NoAnnoList(Op("FCTString",[Var("str")]))]))])),Var("l")])),NoAnnoList(ListTail([App(CallNoArgs(SVar("un-double-quote")),Var("str"))],Var("l"))))),RDefNoArgs("to-funcons-string-list",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(Op("FCTApp",[NoAnnoList(Str("\"ascii-character\"")),NoAnnoList(Op("FCTApp",[NoAnnoList(Str("\"list-to-string\"")),NoAnnoList(Op("FCTList",[Var("seq")]))]))])),Var("l")])),App(CallNoArgs(SVar("to-funcons-string-list")),NoAnnoList(Tuple([Var("seq"),Var("l")])))))])])