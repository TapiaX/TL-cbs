Module("nabl2/runtime/analysis/constraint-compat",[Imports([Import("libspoofax/analysis/constraint")]),Signature([Constructors([OpDecl("AnalyzeUnit",FunType([ConstType(SortNoArgs("String")),ConstType(SortNoArgs("Term")),ConstType(SortNoArgs("Cancel")),ConstType(SortNoArgs("Progress"))],ConstType(SortNoArgs("AnalysisAction")))),OpDecl("UnitResult",FunType([ConstType(SortNoArgs("Term")),ConstType(SortNoArgs("Term")),ConstType(Sort("List",[SortNoArgs("EditorMessage")])),ConstType(Sort("List",[SortNoArgs("EditorMessage")])),ConstType(Sort("List",[SortNoArgs("EditorMessage")]))],ConstType(SortNoArgs("AnalysisResult"))))]),Constructors([OpDecl("AnalyzeInitial",FunType([ConstType(SortNoArgs("String")),ConstType(SortNoArgs("Cancel")),ConstType(SortNoArgs("Progress"))],ConstType(SortNoArgs("AnalysisAction")))),OpDecl("InitialResult",FunType([ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("AnalysisResult")))),OpDecl("AnalyzeUnit",FunType([ConstType(SortNoArgs("String")),ConstType(SortNoArgs("Term")),ConstType(SortNoArgs("Term")),ConstType(SortNoArgs("Cancel")),ConstType(SortNoArgs("Progress"))],ConstType(SortNoArgs("AnalysisAction")))),OpDecl("UnitResult",FunType([ConstType(SortNoArgs("Term")),ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("AnalysisResult")))),OpDecl("AnalyzeFinal",FunType([ConstType(SortNoArgs("String")),ConstType(SortNoArgs("Term")),ConstType(Sort("List",[SortNoArgs("Term")])),ConstType(SortNoArgs("Cancel")),ConstType(SortNoArgs("Progress"))],ConstType(SortNoArgs("AnalysisAction")))),OpDecl("FinalResult",FunType([ConstType(SortNoArgs("Term")),ConstType(Sort("List",[SortNoArgs("EditorMessage")])),ConstType(Sort("List",[SortNoArgs("EditorMessage")])),ConstType(Sort("List",[SortNoArgs("EditorMessage")]))],ConstType(SortNoArgs("AnalysisResult")))),OpDecl("CompatUnitAnalysis",FunType([ConstType(SortNoArgs("Term")),ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("CompatAnalysis")))),OpDecl("CompatProjectAnalysis",FunType([ConstType(SortNoArgs("Term")),ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("CompatAnalysis"))))])]),Rules([RDef("constraint-analysis-compat",[DefaultVarDec("analyze")],Rule(NoAnnoList(Op("AnalyzeSingle",[Var(ListVar("change*")),Var("progress"),Var("cancel")])),NoAnnoList(Op("AnalysisResult",[Var(ListVar("result*"))])),[WithClause(Seq(Assign(Var(ListVar("ast*")),App(Call(SVar("filter"),[TupleCong(Id,[Choice(Match(NoAnnoList(Op("Added",[RootApp(Id)]))),Match(NoAnnoList(Op("Changed",[RootApp(Id),Wld]))))])]),Var(ListVar("change*")))),Seq(Assign(Var(ListVar("unit-result*")),App(Call(SVar("map"),[Scope(["resource","ast","ast'","a'",ListVar("error*"),ListVar("warning*"),ListVar("note*")],Seq(Match(NoAnnoList(Tuple([Var("resource"),Var("ast")]))),GuardedLChoice(Assign(NoAnnoList(Op("UnitResult",[Var("ast'"),Var("a'"),Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))])),App(CallNoArgs(SVar("analyze")),NoAnnoList(Op("AnalyzeUnit",[Var("resource"),Var("ast"),Var("cancel"),Var("progress")])))),Build(NoAnnoList(Tuple([Var("resource"),NoAnnoList(Op("Full",[Var("ast'"),NoAnnoList(Op("CompatUnitAnalysis",[Var("a'"),Var("a'")])),Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))]))]))),Build(NoAnnoList(Tuple([Var("resource"),NoAnnoList(Op("Failed",[]))]))))))]),Var(ListVar("ast*")))),Assign(Var(ListVar("result*")),Var(ListVar("unit-result*"))))))])),RDef("constraint-analysis-compat",[DefaultVarDec("analyze")],Rule(NoAnnoList(Op("AnalyzeMulti",[NoAnnoList(Tuple([Var("project-resource"),Var("project-change")])),Var(ListVar("change*")),Var("progress"),Var("cancel")])),NoAnnoList(Op("AnalysisResult",[Var(ListVar("result*"))])),[WithClause(Seq(SwitchChoice(Build(Var("project-change")),[SwitchCase(Choice(Match(NoAnnoList(Op("Added",[Wld]))),Match(NoAnnoList(Op("Changed",[Wld,Wld])))),Assign(NoAnnoList(Op("InitialResult",[Var("project-initial-analysis")])),App(CallNoArgs(SVar("analyze")),NoAnnoList(Op("AnalyzeInitial",[Var("project-resource"),Var("cancel"),Var("progress")]))))),SwitchCase(Match(NoAnnoList(Op("Cached",[NoAnnoList(Op("CompatProjectAnalysis",[Var("project-initial-analysis"),Wld]))]))),Id)],CallT(SVar("fatal-err"),[],[NoAnnoList(Str("\"Unexpected change on project\""))])),Seq(Assign(Var(ListVar("changed-ast*")),App(Call(SVar("filter"),[TupleCong(Id,[Choice(Match(NoAnnoList(Op("Added",[RootApp(Id)]))),Match(NoAnnoList(Op("Changed",[RootApp(Id),Wld]))))])]),Var(ListVar("change*")))),Seq(Assign(Var(ListVar("unit-initial-result-changed*")),App(Call(SVar("map"),[Scope(["unit-resource","unit-ast","unit-ast'","unit-analysis"],Seq(Match(NoAnnoList(Tuple([Var("unit-resource"),Var("unit-ast")]))),GuardedLChoice(Assign(NoAnnoList(Op("UnitResult",[Var("unit-ast'"),Var("unit-analysis")])),App(CallNoArgs(SVar("analyze")),NoAnnoList(Op("AnalyzeUnit",[Var("unit-resource"),Var("unit-ast"),Var("project-initial-analysis"),Var("cancel"),Var("progress")])))),Build(NoAnnoList(Tuple([Var("unit-resource"),NoAnnoList(Op("Full",[Var("unit-ast'"),NoAnnoList(Op("CompatUnitAnalysis",[Var("unit-analysis"),NoAnnoList(Op("None",[]))])),NoAnnoList(List([])),NoAnnoList(List([])),NoAnnoList(List([]))]))]))),Build(NoAnnoList(Tuple([Var("unit-resource"),NoAnnoList(Op("Failed",[]))]))))))]),Var(ListVar("changed-ast*")))),Seq(Assign(Var(ListVar("unit-initial-analysis-changed*")),App(Call(SVar("filter"),[Match(NoAnnoList(Tuple([Wld,NoAnnoList(Op("Full",[Wld,NoAnnoList(Op("CompatUnitAnalysis",[RootApp(Id),Wld])),Wld,Wld,Wld]))])))]),Var(ListVar("unit-initial-result-changed*")))),Seq(Assign(Var(ListVar("unit-initial-result-cached*")),App(Call(SVar("filter"),[LRule(RuleNoCond(NoAnnoList(Tuple([Var("unit-resource"),NoAnnoList(Op("Cached",[NoAnnoList(Op("CompatUnitAnalysis",[Var("unit-analysis"),Wld]))]))])),NoAnnoList(Tuple([Var("unit-resource"),NoAnnoList(Op("Update",[NoAnnoList(Op("CompatUnitAnalysis",[Var("unit-analysis"),NoAnnoList(Op("None",[]))])),NoAnnoList(List([])),NoAnnoList(List([])),NoAnnoList(List([]))]))]))))]),Var(ListVar("change*")))),Seq(Assign(Var(ListVar("unit-initial-analysis-cached*")),App(Call(SVar("filter"),[Match(NoAnnoList(Tuple([Wld,NoAnnoList(Op("Update",[NoAnnoList(Op("CompatUnitAnalysis",[RootApp(Id),Wld])),Wld,Wld,Wld]))])))]),Var(ListVar("unit-initial-result-cached*")))),Seq(Assign(Var(ListVar("unit-initial-analysis*")),NoAnnoList(List([Var(ListVar("unit-initial-analysis-changed*")),Var(ListVar("unit-initial-analysis-cached*"))]))),Seq(IfThen(Assign(As(Var(ListVar("project-analysis-cached*")),NoAnnoList(ListTail([Wld],Wld))),App(Call(SVar("filter"),[Match(NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Op("Cached",[NoAnnoList(Op("CompatProjectAnalysis",[Wld,Wld]))]))])))]),Var(ListVar("change*")))),BA(CallT(SVar("fatal-err"),[],[NoAnnoList(Str("\"Context is in inconsistent state. Clean the project to reset the context. This can happen when a context is written in one environment (e.g., Eclipse) and later read in another (e.g., Maven).\""))]),Var(ListVar("project-analysis-cached*")))),Seq(Assign(NoAnnoList(Op("FinalResult",[Var("final-analysis"),Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))])),App(CallNoArgs(SVar("analyze")),NoAnnoList(Op("AnalyzeFinal",[Var("project-resource"),Var("project-initial-analysis"),Var(ListVar("unit-initial-analysis*")),Var("cancel"),Var("progress")])))),Seq(Assign(Var("project-analysis"),NoAnnoList(Op("CompatProjectAnalysis",[Var("project-initial-analysis"),Var("final-analysis")]))),Seq(Assign(Var(ListVar("unit-result-changed*")),App(Call(SVar("map"),[TupleCong(Id,[Choice(Call(SVar("Full"),[Id,Call(SVar("CompatUnitAnalysis"),[Id,Build(Var("final-analysis"))]),Id,Id,Id]),Match(NoAnnoList(Op("Failed",[]))))])]),Var(ListVar("unit-initial-result-changed*")))),Seq(Assign(Var(ListVar("unit-result-cached*")),App(Call(SVar("map"),[TupleCong(Id,[Call(SVar("Update"),[Call(SVar("CompatUnitAnalysis"),[Id,Build(Var("final-analysis"))]),Id,Id,Id])])]),Var(ListVar("unit-initial-result-cached*")))),Seq(Assign(Var(ListVar("unit-result*")),NoAnnoList(List([Var(ListVar("unit-result-changed*")),Var(ListVar("unit-result-cached*"))]))),Seq(SwitchChoiceNoOtherwise(Build(Var("project-change")),[SwitchCase(Choice(Match(NoAnnoList(Op("Added",[Var("project-ast")]))),Match(NoAnnoList(Op("Changed",[Var("project-ast"),Wld])))),Assign(Var("project-result"),NoAnnoList(Op("Full",[Var("project-ast"),Var("project-analysis"),Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))])))),SwitchCase(Match(NoAnnoList(Op("Cached",[Wld]))),Assign(Var("project-result"),NoAnnoList(Op("Update",[Var("project-analysis"),Var(ListVar("error*")),Var(ListVar("warning*")),Var(ListVar("note*"))]))))]),Assign(Var(ListVar("result*")),NoAnnoList(ListTail([NoAnnoList(Tuple([Var("project-resource"),Var("project-result")]))],Var(ListVar("unit-result*"))))))))))))))))))))]))]),Rules([SDefNoArgs("nabl2--get-resource-analysis",Seq(CallNoArgs(SVar("get-resource-constraint-analysis")),Choice(Match(NoAnnoList(Op("CompatUnitAnalysis",[Wld,RootApp(Id)]))),Match(NoAnnoList(Op("CompatProjectAnalysis",[Wld,RootApp(Id)])))))),SDefNoArgs("nabl2--get-resource-partial-analysis",Seq(CallNoArgs(SVar("get-resource-constraint-analysis")),Choice(Match(NoAnnoList(Op("CompatUnitAnalysis",[RootApp(Id),Wld]))),Match(NoAnnoList(Op("CompatProjectAnalysis",[RootApp(Id),Wld]))))))])])