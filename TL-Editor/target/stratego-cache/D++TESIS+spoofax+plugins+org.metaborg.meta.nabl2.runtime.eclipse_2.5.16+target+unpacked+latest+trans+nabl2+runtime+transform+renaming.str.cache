Module("nabl2/runtime/transform/renaming",[Imports([ImportWildcard("signatures"),ImportWildcard("signatures/nabl2/shared/common"),ImportWildcard("signatures/nabl2/runtime/common"),Import("nabl2/api"),Import("nabl2/runtime/analysis/constraint-compat"),Import("libspoofax/analysis/constraint"),Import("libspoofax/ui/dialogs")]),Rules([RDefT("nabl2-rename-action",[DefaultVarDec("construct-textual-change"),DefaultVarDec("analyze"),DefaultVarDec("multi")],[],Rule(NoAnnoList(Tuple([Var("selected-term"),Wld,Var("selected-ast"),Var("path"),Wld])),Var("renamed-program"),[WithClause(DynRuleScope([DynRuleScopeId("ErrorMessage")],LChoice(Seq(Assign(Var("new-name"),App(CallNoArgs(SVar("read-new-name")),Var("path"))),Seq(Assign(Var("renamed-asts"),App(CallT(SVar("nabl2-rename"),[CallNoArgs(SVar("analyze")),CallNoArgs(SVar("multi"))],[Var("selected-term"),Var("new-name")]),Var("selected-ast"))),Assign(Var("renamed-program"),App(Call(SVar("nabl2-construct-renamed-program"),[CallNoArgs(SVar("construct-textual-change"))]),Var("renamed-asts"))))),CallNoArgs(SVar("show-errors")))))])),RDefT("nabl2-rename",[DefaultVarDec("analyze"),DefaultVarDec("multi")],[DefaultVarDec("selected-term"),DefaultVarDec("new-name")],Rule(Var("selected-ast"),Var("renamed-asts"),Seq(Assign(Var("asts"),App(Call(SVar("nabl2-get-analysed-asts"),[CallNoArgs(SVar("multi"))]),Var("selected-ast"))),Seq(Assign(Var("analysis"),App(Call(SVar("nabl2-get-project-analysis"),[CallNoArgs(SVar("multi"))]),Var("selected-ast"))),Seq(Assign(Var("res-rel"),App(CallNoArgs(SVar("nabl2-calc-resolution-relation")),Var("analysis"))),Seq(Assign(Var("selected-index"),App(CallT(SVar("nabl2-find-name-index"),[],[Var("selected-ast"),Var("res-rel")]),Var("selected-term"))),Seq(Assign(NoAnnoList(Tuple([Var("target-paths"),Var("target-indices")])),App(CallNoArgs(SVar("nabl2-find-rename-target")),NoAnnoList(Tuple([Var("selected-index"),Var("res-rel")])))),Seq(Assign(Var("renamed-asts"),App(CallT(SVar("nabl2-rename-asts"),[],[Var("target-indices"),Var("target-paths"),Var("new-name")]),Var("asts"))),CallT(SVar("nabl2-check-capture"),[CallNoArgs(SVar("analyze")),CallNoArgs(SVar("multi"))],[Var("renamed-asts"),Var("res-rel")])))))))))]),Rules([RDefNoArgs("nabl2-calc-resolution-relation",Rule(Var("analysis"),Var("user-defined-relation"),Seq(Assign(Var("refs"),App(Seq(CallT(SVar("nabl2-get-all-refs"),[],[Var("analysis")]),Call(SVar("filter"),[CallNoArgs(SVar("is-string-occ"))])),Var("analysis"))),Seq(Assign(Var("decs"),App(Seq(CallT(SVar("nabl2-get-all-decls"),[],[Var("analysis")]),Call(SVar("filter"),[CallNoArgs(SVar("is-string-occ"))])),Var("analysis"))),Seq(Assign(Var("ref-dec-pairs"),App(Call(SVar("map"),[CallT(SVar("nabl2-make-resolution-pair"),[],[Var("analysis")])]),Var("refs"))),Seq(Assign(Var("decs-reflexive-pairs"),App(Seq(Call(SVar("filter"),[CallNoArgs(SVar("resolves-to-term-index"))]),Call(SVar("map"),[CallNoArgs(SVar("nabl2-make-reflexive-pair"))])),Var("decs"))),Seq(Assign(Var("relation"),App(Seq(CallNoArgs(SVar("conc")),CallNoArgs(SVar("make-set"))),NoAnnoList(Tuple([Var("decs-reflexive-pairs"),Var("ref-dec-pairs")])))),Assign(Var("user-defined-relation"),App(Call(SVar("filter"),[CallNoArgs(SVar("is-user-defined"))]),Var("relation")))))))))),RDefT("nabl2-make-resolution-pair",[],[DefaultVarDec("analysis")],Rule(Var("ref"),NoAnnoList(Tuple([Var("ref-index"),Var("dec-index")])),Seq(Assign(NoAnnoList(Tuple([Var("dec"),Wld])),App(CallT(SVar("nabl2-get-resolved-name"),[],[Var("analysis")]),Var("ref"))),Seq(Assign(Var("ref-index"),App(CallNoArgs(SVar("get-term-index-from-occ")),Var("ref"))),Assign(Var("dec-index"),App(CallNoArgs(SVar("get-term-index-from-occ")),Var("dec"))))))),RDefNoArgs("nabl2-make-reflexive-pair",Rule(Var("dec"),NoAnnoList(Tuple([Var("term-index"),Var("term-index")])),Assign(Var("term-index"),App(CallNoArgs(SVar("get-term-index-from-occ")),Var("dec"))))),RDefNoArgs("is-user-defined",Rule(NoAnnoList(Tuple([Var("ref"),As(Var("dec"),NoAnnoList(Op("TermIndex",[Var("path"),Var("num-index")])))])),RootApp(Id),BA(Not(CallNoArgs(SVar("eq"))),NoAnnoList(Tuple([Var("num-index"),NoAnnoList(Int("0"))]))))),RDefNoArgs("is-string-occ",Rule(NoAnnoList(Op("Occurrence",[Wld,Var("term"),Wld])),RootApp(Id),BA(CallNoArgs(SVar("is-string")),Var("term")))),RDefNoArgs("resolves-to-term-index",RuleNoCond(NoAnnoList(Op("Occurrence",[Wld,Var("term"),NoAnnoList(Op("TermIndex",[Wld,Wld]))])),RootApp(Id))),RDefNoArgs("get-term-index-from-occ",RuleNoCond(NoAnnoList(Op("Occurrence",[Wld,Wld,Var("term-index")])),Var("term-index")))]),Rules([RDefT("nabl2-find-name-index",[],[DefaultVarDec("ast"),DefaultVarDec("res-rel")],Rule(Var("term"),Var("occ-index"),LChoice(Seq(BA(CallT(SVar("check-selection"),[],[Var("term"),Var("ast")]),Var("ast")),Assign(Var("occ-index"),App(Call(SVar("collect-one"),[CallT(SVar("nabl2-get-name-index"),[],[Var("res-rel")])]),Var("term")))),Seq(Assign(Var("term-string"),App(CallNoArgs(SVar("write-to-string")),Var("term"))),Seq(Assign(Var("error-msg"),App(CallNoArgs(SVar("conc-strings")),NoAnnoList(Tuple([NoAnnoList(Str("\"The selected name cannot be renamed:\\n\"")),Var("term-string")])))),CallT(SVar("add-error"),[],[NoAnnoList(Str("\"Renaming impossible\"")),Var("error-msg")])))))),RDefT("nabl2-get-name-index",[],[DefaultVarDec("res-rel")],Rule(Var("term"),Var("occurrence"),CondChoice(BA(CallNoArgs(SVar("is-list")),Var("term")),BA(Call(SVar("map"),[CallT(SVar("nabl2-get-name-index"),[],[Var("res-rel")])]),Var("term")),Seq(BA(CallNoArgs(SVar("is-string")),Var("term")),Seq(Assign(Var("term-index"),App(CallNoArgs(SVar("nabl2-get-ast-index")),Var("term"))),Assign(Var("occurrence"),App(Call(SVar("fetch-elem"),[CallT(SVar("res-pair-contains"),[],[Var("term-index")])]),Var("res-rel")))))))),RDefT("res-pair-contains",[],[DefaultVarDec("term-index")],Rule(NoAnnoList(Tuple([Var("ref-index"),Var("dec-index")])),Var("term-index"),LChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("term-index"),Var("ref-index")]))),BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("term-index"),Var("dec-index")])))))),SDefT("check-selection",[],[DefaultVarDec("selected-term"),DefaultVarDec("ast")],LChoice(BA(Not(CallNoArgs(SVar("eq"))),NoAnnoList(Tuple([Var("selected-term"),Var("ast")]))),CallT(SVar("add-error"),[],[NoAnnoList(Str("\"Invalid selection\"")),NoAnnoList(Str("\"Please select a name\""))])))]),Rules([RDefNoArgs("nabl2-find-rename-target",Rule(NoAnnoList(Tuple([Var("selected-occ"),Var("resolution-relation")])),NoAnnoList(Tuple([Var("target-paths"),Var("target-indices")])),Seq(Assign(Var("target-indices"),App(CallNoArgs(SVar("find-all-related-occs")),NoAnnoList(Tuple([Var("selected-occ"),Var("resolution-relation")])))),Assign(Var("target-paths"),App(CallNoArgs(SVar("get-paths-to-rename")),Var("target-indices")))))),RDefNoArgs("get-paths-to-rename",Rule(Var("target-indices"),Var("paths"),Assign(Var("paths"),App(Seq(Call(SVar("map"),[CallNoArgs(SVar("get-paths"))]),CallNoArgs(SVar("nub"))),Var("target-indices"))))),RDefNoArgs("get-paths",RuleNoCond(NoAnnoList(Op("TermIndex",[Var("path"),Wld])),Var("path")))]),Rules([RDefT("nabl2-rename-asts",[],[DefaultVarDec("target-indices"),DefaultVarDec("target-paths"),DefaultVarDec("new-name")],Rule(Var("asts"),Var("renamed-asts"),Assign(Var("renamed-asts"),App(Call(SVar("map"),[CallT(SVar("nabl2-rename-ast"),[],[Var("target-indices"),Var("target-paths"),Var("new-name")])]),Var("asts"))))),RDefT("nabl2-rename-ast",[],[DefaultVarDec("target-indices"),DefaultVarDec("target-paths"),DefaultVarDec("new-name")],Rule(NoAnnoList(Tuple([Var("path"),Var("ast")])),NoAnnoList(Tuple([Var("path"),Var("ast"),Var("renamed-ast")])),CondChoice(BA(CallT(SVar("path-in"),[],[Var("target-paths")]),Var("path")),Assign(Var("renamed-ast"),App(Call(SVar("bottomup"),[Call(SVar("try"),[CallT(SVar("nabl2-rename-term"),[],[Var("target-indices"),Var("new-name")])])]),Var("ast"))),Assign(Var("renamed-ast"),NoAnnoList(Tuple([])))))),RDefT("path-in",[],[DefaultVarDec("paths")],Rule(Var("path"),RootApp(Id),BA(CallNoArgs(SVar("elem")),NoAnnoList(Tuple([Var("path"),Var("paths")]))))),RDefT("nabl2-rename-term",[],[DefaultVarDec("target-indices"),DefaultVarDec("new-name")],Rule(Var("term"),Var("new-name"),Seq(BA(CallNoArgs(SVar("is-string")),Var("term")),Seq(Assign(Var("term-index"),App(CallNoArgs(SVar("nabl2-get-ast-index")),Var("term"))),BA(CallNoArgs(SVar("elem")),NoAnnoList(Tuple([Var("term-index"),Var("target-indices")])))))))]),Rules([SDefT("nabl2-check-capture",[DefaultVarDec("analyze"),DefaultVarDec("multi")],[DefaultVarDec("renamed-asts"),DefaultVarDec("resolution-relation")],LChoice(Seq(Assign(Var("new-analysis"),App(Call(SVar("nabl2-rerun-analysis"),[CallNoArgs(SVar("analyze")),CallNoArgs(SVar("multi"))]),Var("renamed-asts"))),Seq(Assign(Var("new-resolution-relation"),App(Seq(CallNoArgs(SVar("nabl2-calc-resolution-relation")),Call(SVar("qsort"),[CallNoArgs(SVar("res-pair-gt"))])),Var("new-analysis"))),Seq(Assign(Var("old-resolution-relation"),App(Call(SVar("qsort"),[CallNoArgs(SVar("res-pair-gt"))]),Var("resolution-relation"))),BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("old-resolution-relation"),Var("new-resolution-relation")])))))),CallT(SVar("add-error"),[],[NoAnnoList(Str("\"Capture detected\"")),NoAnnoList(Str("\"This renaming leads to name capture\""))]))),RDef("nabl2-rerun-analysis",[DefaultVarDec("analyze"),DefaultVarDec("multi")],Rule(Var("renamed-asts"),Var("new-analysis"),CondChoice(CallNoArgs(SVar("multi")),Assign(Var("new-analysis"),App(Call(SVar("nabl2-rerun-analysis-multi"),[CallNoArgs(SVar("analyze"))]),Var("renamed-asts"))),Assign(Var("new-analysis"),App(Call(SVar("nabl2-rerun-analysis-single"),[CallNoArgs(SVar("analyze"))]),Var("renamed-asts")))))),RDef("nabl2-rerun-analysis-single",[DefaultVarDec("analyze")],Rule(NoAnnoList(List([NoAnnoList(Tuple([Var("path"),Wld,Var("renamed-ast")]))])),Var("new-analysis"),Seq(Assign(Var("input"),App(CallNoArgs(SVar("nabl2-make-analysis-input-single")),NoAnnoList(Tuple([Var("path"),Var("renamed-ast")])))),Seq(Assign(NoAnnoList(Op("AnalysisResult",[Var("analyses")])),App(CallNoArgs(SVar("analyze")),Var("input"))),Assign(NoAnnoList(Tuple([Wld,NoAnnoList(Op("Full",[Wld,NoAnnoList(Op("CompatUnitAnalysis",[Wld,Var("new-analysis")])),Wld,Wld,Wld]))])),App(Call(SVar("fetch-elem"),[Match(NoAnnoList(Tuple([Var("path"),Wld])))]),Var("analyses"))))))),RDefNoArgs("nabl2-make-analysis-input-single",Rule(NoAnnoList(Tuple([Var("path"),Var("renamed-ast")])),NoAnnoList(Op("AnalyzeSingle",[NoAnnoList(List([NoAnnoList(Tuple([Var("path"),Var("change")]))])),NoAnnoList(Tuple([])),NoAnnoList(Tuple([]))])),Seq(Assign(Var("old-analysis"),App(CallNoArgs(SVar("nabl2-get-ast-analysis")),Var("renamed-ast"))),Assign(Var("change"),NoAnnoList(Op("Changed",[Var("renamed-ast"),Var("old-analysis")])))))),RDef("nabl2-rerun-analysis-multi",[DefaultVarDec("analyze")],Rule(Var("renamed-asts"),Var("new-analysis"),Seq(Assign(Var("input"),App(CallNoArgs(SVar("nabl2-make-analysis-input-multi")),Var("renamed-asts"))),Seq(Assign(Var("analysis-result"),App(CallNoArgs(SVar("analyze")),Var("input"))),Assign(Var("new-analysis"),App(CallNoArgs(SVar("get-new-analysis")),Var("analysis-result"))))))),RDefNoArgs("nabl2-make-analysis-input-multi",Rule(Var("renamed-asts"),NoAnnoList(Op("AnalyzeMulti",[Var("project-changes"),Var("file-changes"),NoAnnoList(Tuple([])),NoAnnoList(Tuple([]))])),Seq(Assign(Var("project-analyses"),RootApp(CallNoArgs(SVar("get-project-constraint-analyses")))),Seq(Assign(Var("analysis"),App(CallNoArgs(SVar("get-project-entry")),Var("project-analyses"))),Seq(Assign(Var("project-changes"),NoAnnoList(Tuple([NoAnnoList(Str("\".\"")),NoAnnoList(Op("Cached",[Var("analysis")]))]))),Assign(Var("file-changes"),App(Call(SVar("map"),[CallT(SVar("nabl2-make-file-change"),[],[Var("project-analyses")])]),Var("renamed-asts")))))))),RDefT("nabl2-make-file-change",[],[DefaultVarDec("project-analyses")],Rule(NoAnnoList(Tuple([Var("path"),Var("ast"),Var("renamed-ast")])),NoAnnoList(Tuple([Var("path"),Var("file-change")])),Seq(Assign(NoAnnoList(Tuple([Wld,Var("analysis")])),App(Call(SVar("fetch-elem"),[CallT(SVar("get-entry"),[],[Var("path")])]),Var("project-analyses"))),CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("renamed-ast"),NoAnnoList(Tuple([]))]))),Assign(Var("file-change"),NoAnnoList(Op("Cached",[Var("analysis")]))),Assign(Var("file-change"),NoAnnoList(Op("Changed",[Var("renamed-ast"),Var("analysis")]))))))),RDefNoArgs("get-new-analysis",Rule(NoAnnoList(Op("AnalysisResult",[Var("analysis-list")])),Var("analysis-object"),Seq(Assign(NoAnnoList(Tuple([NoAnnoList(Op("Update",[Var("project-analysis"),Wld,Wld,Wld]))])),App(CallNoArgs(SVar("get-project-entry")),Var("analysis-list"))),Assign(Var("analysis-object"),App(CallNoArgs(SVar("get-analysis-object")),Var("project-analysis")))))),RDefNoArgs("res-pair-gt",Rule(NoAnnoList(Tuple([NoAnnoList(Tuple([Var("ref-1"),Var("dec-1")])),NoAnnoList(Tuple([Var("ref-2"),Var("dec-2")]))])),RootApp(Id),BA(CallNoArgs(SVar("term-index-gt")),NoAnnoList(Tuple([Var("ref-1"),Var("ref-2")]))))),RDefNoArgs("term-index-gt",Rule(NoAnnoList(Tuple([NoAnnoList(Op("TermIndex",[Var("path-1"),Var("num-index-1")])),NoAnnoList(Op("TermIndex",[Var("path-2"),Var("num-index-2")]))])),RootApp(Id),CondChoice(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("path-1"),Var("path-2")]))),BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([Var("num-index-1"),Var("num-index-2")]))),BA(CallNoArgs(SVar("string-gt")),NoAnnoList(Tuple([Var("path-1"),Var("path-2")]))))))]),Rules([RDef("nabl2-construct-renamed-program",[DefaultVarDec("construct-textual-change")],Rule(Var("asts"),Var("renamed-program"),Seq(Assign(Var("changed-asts"),App(Call(SVar("filter"),[CallNoArgs(SVar("has-changed"))]),Var("asts"))),Assign(Var("renamed-program"),App(Seq(Call(SVar("map"),[Call(SVar("construct-renamed-file"),[CallNoArgs(SVar("construct-textual-change"))])]),CallNoArgs(SVar("unzip"))),Var("changed-asts")))))),RDef("construct-renamed-file",[DefaultVarDec("construct-textual-change")],Rule(NoAnnoList(Tuple([Var("path"),Var("ast"),Var("renamed-ast")])),NoAnnoList(Tuple([Var("path"),Var("text")])),Assign(NoAnnoList(Tuple([Wld,Wld,Var("text")])),App(CallNoArgs(SVar("construct-textual-change")),NoAnnoList(Tuple([Var("ast"),Var("renamed-ast")])))))),RDefNoArgs("has-changed",Rule(NoAnnoList(Tuple([Wld,Wld,Var("renamed-ast")])),RootApp(Id),BA(Not(CallNoArgs(SVar("eq"))),NoAnnoList(Tuple([Var("renamed-ast"),NoAnnoList(Tuple([]))])))))]),Rules([RDefNoArgs("read-new-name",Rule(Wld,Var("new-name"),Assign(Var("new-name"),App(CallT(SVar("show-input-dialog"),[],[NoAnnoList(Str("\"Rename\"")),NoAnnoList(Str("\"\""))]),NoAnnoList(Str("\"Enter a new name\"")))))),RDef("nabl2-get-project-analysis",[DefaultVarDec("multi")],Rule(Var("ast"),Var("analysis"),CondChoice(CallNoArgs(SVar("multi")),Seq(Assign(Var("project-analyses"),RootApp(CallNoArgs(SVar("get-project-constraint-analyses")))),Assign(Var("analysis"),App(Seq(CallNoArgs(SVar("get-project-entry")),CallNoArgs(SVar("get-analysis-object"))),Var("project-analyses")))),Assign(Var("analysis"),App(CallNoArgs(SVar("nabl2-get-ast-analysis")),Var("ast")))))),RDefNoArgs("get-project-entry",Rule(Var("entries"),Var("project-analysis"),Assign(NoAnnoList(Tuple([Wld,Var("project-analysis")])),App(Call(SVar("fetch-elem"),[CallNoArgs(SVar("is-project-entry"))]),Var("entries"))))),SDefNoArgs("is-project-entry",CallT(SVar("get-entry"),[],[NoAnnoList(Str("\".\""))])),RDefT("get-entry",[],[DefaultVarDec("search-path")],Rule(NoAnnoList(Tuple([Var("path"),Wld])),RootApp(Id),BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("path"),Var("search-path")]))))),RDefNoArgs("get-analysis-object",RuleNoCond(NoAnnoList(Op("CompatProjectAnalysis",[Wld,Var("analysis-object")])),Var("analysis-object"))),RDefNoArgs("get-analysis-object",RuleNoCond(NoAnnoList(Op("CompatUnitAnalysis",[Wld,Var("analysis-object")])),Var("analysis-object"))),RDef("nabl2-get-analysed-asts",[DefaultVarDec("multi")],Rule(Var("selected-ast"),Var("asts"),CondChoice(CallNoArgs(SVar("multi")),Assign(Var("asts"),RootApp(CallNoArgs(SVar("nabl2-get-analysed-asts-multi")))),Assign(Var("asts"),App(CallNoArgs(SVar("nabl2-get-analysed-asts-single")),Var("selected-ast")))))),RDefNoArgs("nabl2-get-analysed-asts-multi",Rule(Wld,Var("asts"),Seq(Assign(Var("project-asts"),RootApp(CallNoArgs(SVar("get-project-analyzed-asts")))),Assign(Var("asts"),App(Call(SVar("filter"),[Not(CallNoArgs(SVar("is-project-entry")))]),Var("project-asts")))))),RDefNoArgs("nabl2-get-analysed-asts-single",Rule(Var("selected-ast"),NoAnnoList(List([NoAnnoList(Tuple([Var("path"),Var("selected-ast")]))])),Assign(NoAnnoList(Op("TermIndex",[Var("path"),Wld])),App(CallNoArgs(SVar("nabl2-get-ast-index")),Var("selected-ast")))))]),Rules([SDefT("add-error",[],[DefaultVarDec("title"),DefaultVarDec("message")],Seq(GenDynRules([AddDynRule(DynRuleId(RDecNoArgs("ErrorMessage")),RuleNoCond(NoAnnoList(Tuple([])),NoAnnoList(Tuple([Var("title"),Var("message")]))))]),Fail)),SDefNoArgs("show-errors",Seq(Assign(NoAnnoList(ListTail([NoAnnoList(Tuple([Var("title"),Var("message")]))],Wld)),App(CallNoArgs(SVar("bagof-ErrorMessage")),NoAnnoList(Tuple([])))),BA(CallT(SVar("show-dialog"),[],[Var("title"),NoAnnoList(Str("\"ERROR\""))]),Var("message"))))]),Rules([SDefNoArgs("find-all-related-occs",PrimNoArgs("\"FindAllRelatedOccurrences\""))])])