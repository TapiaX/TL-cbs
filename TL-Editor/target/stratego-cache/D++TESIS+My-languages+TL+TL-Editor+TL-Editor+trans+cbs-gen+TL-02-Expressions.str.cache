Module("TL-02-Expressions",[Imports([Import("libstratego-gpp"),ImportWildcard("signatures"),Import("pp/TL-parenthesize"),Import("pp/TL-pp")]),Imports([Import("cbs-gen/TL-01-Lexical")]),Rules([RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval",[NoAnnoList(Op("L-exp--L-id",[Var("(:ID:)")]))])),NoAnnoList(Op("FCTApp",[NoAnnoList(Str("assigned")),NoAnnoList(Op("FCTApp",[NoAnnoList(Str("bound")),NoAnnoList(Op("T-id",[Var("(:ID:)")]))]))])))),RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval",[NoAnnoList(Op("L-exp--L-aexp",[Var("(:AExp:)")]))])),NoAnnoList(Op("T-eval-arith",[Var("(:AExp:)")])))),RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval",[NoAnnoList(Op("L-exp--L-bexp",[Var("(:BExp:)")]))])),NoAnnoList(Op("T-eval-bool",[Var("(:BExp:)")])))),RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval-arith",[NoAnnoList(Op("L-aexp--L-int",[Var("(:N:)")]))])),NoAnnoList(Op("T-int",[Var("(:N:)")])))),RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval-arith",[NoAnnoList(Op("L-aexp--L-aexp-PLUS-L-aexp",[Var("(:AExp1:)"),Var("(:AExp2:)")]))])),NoAnnoList(Op("FCTApp",[NoAnnoList(Str("int-add")),NoAnnoList(Op("FCTGroup",[NoAnnoList(Op("FCTSequence",[NoAnnoList(Op("T-eval-arith",[Var("(:AExp1:)")])),NoAnnoList(Op("T-eval-arith",[Var("(:AExp2:)")]))]))]))])))),RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval-arith",[NoAnnoList(Op("L-aexp--L-aexp-SLASH-L-aexp",[Var("(:AExp1:)"),Var("(:AExp2:)")]))])),NoAnnoList(Op("FCTApp",[NoAnnoList(Str("int-div")),NoAnnoList(Op("FCTGroup",[NoAnnoList(Op("FCTSequence",[NoAnnoList(Op("T-eval-arith",[Var("(:AExp1:)")])),NoAnnoList(Op("T-eval-arith",[Var("(:AExp2:)")]))]))]))])))),RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval-arith",[NoAnnoList(Op("L-aexp--LPAREN-L-aexp-RPAREN",[Var("(:AExp:)")]))])),NoAnnoList(Op("T-eval-arith",[Var("(:AExp:)")])))),RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval-bool",[NoAnnoList(Op("L-bexp--L-bool",[Var("(:B:)")]))])),NoAnnoList(Op("T-val-bool",[Var("(:B:)")])))),RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval-bool",[NoAnnoList(Op("L-bexp--R-no-L-bexp",[Var("(:BExp:)")]))])),NoAnnoList(Op("FCTApp",[NoAnnoList(Str("not")),NoAnnoList(Op("T-eval-bool",[Var("(:BExp:)")]))])))),RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval-bool",[NoAnnoList(Op("L-bexp--L-bexp-R-and-L-bexp",[Var("(:BExp1:)"),Var("(:BExp2:)")]))])),NoAnnoList(Op("FCTApp",[NoAnnoList(Str("if-else")),NoAnnoList(Op("FCTGroup",[NoAnnoList(Op("FCTSequence",[NoAnnoList(Op("T-eval-bool",[Var("(:BExp1:)")])),NoAnnoList(Op("FCTSequence",[NoAnnoList(Op("T-eval-bool",[Var("(:BExp2:)")])),NoAnnoList(Op("FCTName",[NoAnnoList(Str("false"))]))]))]))]))])))),RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval-bool",[NoAnnoList(Op("L-bexp--L-bexp-R-or-L-bexp",[Var("(:BExp1:)"),Var("(:BExp2:)")]))])),NoAnnoList(Op("FCTApp",[NoAnnoList(Str("if-else")),NoAnnoList(Op("FCTGroup",[NoAnnoList(Op("FCTSequence",[NoAnnoList(Op("T-eval-bool",[Var("(:BExp1:)")])),NoAnnoList(Op("FCTSequence",[NoAnnoList(Op("FCTName",[NoAnnoList(Str("true"))])),NoAnnoList(Op("T-eval-bool",[Var("(:BExp2:)")]))]))]))]))])))),RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval-bool",[NoAnnoList(Op("L-bexp--L-aexp-LESS-L-aexp",[Var("(:AExp1:)"),Var("(:AExp2:)")]))])),NoAnnoList(Op("FCTApp",[NoAnnoList(Str("is-less")),NoAnnoList(Op("FCTGroup",[NoAnnoList(Op("FCTSequence",[NoAnnoList(Op("T-eval-arith",[Var("(:AExp1:)")])),NoAnnoList(Op("T-eval-arith",[Var("(:AExp2:)")]))]))]))])))),RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval-bool",[NoAnnoList(Op("L-bexp--L-aexp-GREATER-L-aexp",[Var("(:AExp1:)"),Var("(:AExp2:)")]))])),NoAnnoList(Op("FCTApp",[NoAnnoList(Str("is-greater")),NoAnnoList(Op("FCTGroup",[NoAnnoList(Op("FCTSequence",[NoAnnoList(Op("T-eval-arith",[Var("(:AExp1:)")])),NoAnnoList(Op("T-eval-arith",[Var("(:AExp2:)")]))]))]))])))),RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval-bool",[NoAnnoList(Op("L-bexp--L-exp-EQUALS-EQUALS-L-exp",[Var("(:Exp1:)"),Var("(:Exp2:)")]))])),NoAnnoList(Op("FCTApp",[NoAnnoList(Str("is-eq")),NoAnnoList(Op("FCTGroup",[NoAnnoList(Op("FCTSequence",[NoAnnoList(Op("T-eval",[Var("(:Exp1:)")])),NoAnnoList(Op("T-eval",[Var("(:Exp2:)")]))]))]))])))),RDefNoArgs("to-funcons",RuleNoCond(NoAnnoList(Op("T-eval-bool",[NoAnnoList(Op("L-bexp--LPAREN-L-bexp-RPAREN",[Var("(:BExp:)")]))])),NoAnnoList(Op("T-eval-bool",[Var("(:BExp:)")]))))])])