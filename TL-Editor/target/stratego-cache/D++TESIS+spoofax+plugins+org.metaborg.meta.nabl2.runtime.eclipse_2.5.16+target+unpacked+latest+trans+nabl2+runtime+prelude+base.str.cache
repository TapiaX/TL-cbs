Module("nabl2/runtime/prelude/base",[Imports([Import("libspoofax/term/annotation")]),Rules([SDefNoArgs("nabl2--term-eq",Seq(CallNoArgs(SVar("strip-annos")),CallNoArgs(SVar("eq")))),SDefNoArgs("nabl2--xmlencode",Seq(Call(SVar("try"),[CallT(SVar("string-replace"),[],[NoAnnoList(Str("\"&\"")),NoAnnoList(Str("\"&amp;\""))])]),Seq(Call(SVar("try"),[CallT(SVar("string-replace"),[],[NoAnnoList(Str("\"<\"")),NoAnnoList(Str("\"&lt;\""))])]),Call(SVar("try"),[CallT(SVar("string-replace"),[],[NoAnnoList(Str("\">\"")),NoAnnoList(Str("\"&gt;\""))])])))),SDefT("nabl2--log",[DefaultVarDec("s")],[DefaultVarDec("n")],With(Seq(CallNoArgs(SVar("s")),Call(SVar("debug"),[Build(Var("n"))])))),SDefT("nabl2--log",[],[DefaultVarDec("n")],CallT(SVar("nabl2--log"),[Id],[Var("n")])),SDef("nabl2--log",[DefaultVarDec("s")],CallT(SVar("nabl2--log"),[CallNoArgs(SVar("s"))],[NoAnnoList(Str("\"\""))])),SDef("nabl2--assert",[DefaultVarDec("s")],CallT(SVar("nabl2--assert"),[CallNoArgs(SVar("s"))],[NoAnnoList(Str("\"Assert failed\""))])),SDefT("nabl2--assert",[DefaultVarDec("s")],[DefaultVarDec("msg")],With(LChoice(CallNoArgs(SVar("s")),CallT(SVar("fatal-err"),[],[Var("msg")])))),SDef("nabl2--strict",[DefaultVarDec("s")],CallT(SVar("nabl2--strict"),[CallNoArgs(SVar("s"))],[NoAnnoList(Str("\"Failure in strict mode\""))])),SDefT("nabl2--strict",[DefaultVarDec("s")],[DefaultVarDec("msg")],LChoice(CallNoArgs(SVar("s")),Seq(Match(Var("term")),Seq(AM(PrimNoArgs("\"SSL_stacktrace_get_all_frame_names\""),Var("stack")),Seq(BA(CallNoArgs(SVar("debug")),NoAnnoList(StringQuotation1("              ",[QStr("ERROR: "),StringEscape1("                     ",Var("msg"))]))),BA(CallT(SVar("report-failure"),[],[Var("msg"),Var("term")]),Var("stack"))))))),SDefT("nabl2--deprecated",[],[DefaultVarDec("msg")],With(BA(CallT(SVar("warn"),[],[NoAnnoList(Str("\"DEPRECATED\""))]),Var("msg"))))])])