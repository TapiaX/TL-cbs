module TL-04-Statements

imports
  libstratego-gpp
  signatures/-
  pp/TL-parenthesize
  pp/TL-pp

imports
  cbs-gen/TL-01-Lexical
  cbs-gen/TL-02-Expressions

// Language "TL"

rules

// #4 Statements
              

to-funcons:
  |[ execute[: (:ID:)=(:AExp:) :] ]| ->
  |[ assign (bound (id[: (:ID:) :]), 
             eval[: (:AExp:) :]) ]|
to-funcons:
  |[ execute[: print(:Exp:) :] ]| ->
  |[ print (to-string eval[: (:Exp:) :], 
             "\n") ]|
to-funcons:
  |[ execute[: if(:BExp:)(:Block1:)else(:Block2:) :] ]| ->
  |[ if-else (eval-bool[: (:BExp:) :], 
             execute[: (:Block1:) :], 
             execute[: (:Block2:) :]) ]|
to-funcons:
  |[ execute[: while(:BExp:)(:Block:) :] ]| ->
  |[ while (eval-bool[: (:BExp:) :], 
             execute[: (:Block:) :]) ]|
to-funcons:
  |[ execute[: {(:Stmt*:)} :] ]| ->
  |[ execute[: (:Stmt*:) :] ]|
to-funcons:
  |[ execute[:  :] ]| ->
  |[ null-value ]|
to-funcons:
  |[ execute[: (:Stmt:)(:Stmt+:) :] ]| ->
  |[ sequential (execute[: (:Stmt:) :], 
             execute[: (:Stmt+:) :]) ]|

