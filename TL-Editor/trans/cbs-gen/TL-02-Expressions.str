module TL-02-Expressions

imports
  libstratego-gpp
  signatures/-
  pp/TL-parenthesize
  pp/TL-pp

imports
  cbs-gen/TL-01-Lexical

// Language "TL"

rules

// #2 Expressions
              

to-funcons:
  |[ eval[: (:AExp:) :] ]| ->
  |[ eval-arith[: (:AExp:) :] ]|
to-funcons:
  |[ eval[: (:BExp:) :] ]| ->
  |[ eval-bool[: (:BExp:) :] ]|
to-funcons:
  |[ eval-arith[: (:ID:) :] ]| ->
  |[ assigned bound id[: (:ID:) :] ]|
to-funcons:
  |[ eval-arith[: (:N:) :] ]| ->
  |[ int[: (:N:) :] ]|
to-funcons:
  |[ eval-arith[: (:AExp1:)+(:AExp2:) :] ]| ->
  |[ int-add (eval-arith[: (:AExp1:) :], 
             eval-arith[: (:AExp2:) :]) ]|
to-funcons:
  |[ eval-arith[: (:AExp1:)-(:AExp2:) :] ]| ->
  |[ int-add (eval-arith[: (:AExp1:) :], 
             int-neg (eval-arith[: (:AExp2:) :])) ]|
to-funcons:
  |[ eval-arith[: (:AExp1:)*(:AExp2:) :] ]| ->
  |[ int-mul (eval-arith[: (:AExp1:) :], 
             eval-arith[: (:AExp2:) :]) ]|
to-funcons:
  |[ eval-arith[: (:AExp1:)/(:AExp2:) :] ]| ->
  |[ int-div (eval-arith[: (:AExp1:) :], 
             eval-arith[: (:AExp2:) :]) ]|
to-funcons:
  |[ eval-arith[: ((:AExp:)) :] ]| ->
  |[ eval-arith[: (:AExp:) :] ]|
to-funcons:
  |[ eval-bool[: (:B:) :] ]| ->
  |[ val-bool[: (:B:) :] ]|
to-funcons:
  |[ eval-bool[: no(:BExp:) :] ]| ->
  |[ not eval-bool[: (:BExp:) :] ]|
to-funcons:
  |[ eval-bool[: (:BExp1:)and(:BExp2:) :] ]| ->
  |[ if-else (eval-bool[: (:BExp1:) :], 
             eval-bool[: (:BExp2:) :], 
             false) ]|
to-funcons:
  |[ eval-bool[: (:BExp1:)or(:BExp2:) :] ]| ->
  |[ if-else (eval-bool[: (:BExp1:) :], 
             true, 
             eval-bool[: (:BExp2:) :]) ]|
to-funcons:
  |[ eval-bool[: (:AExp1:)<(:AExp2:) :] ]| ->
  |[ is-less (eval-arith[: (:AExp1:) :], 
             eval-arith[: (:AExp2:) :]) ]|
to-funcons:
  |[ eval-bool[: (:AExp1:)>(:AExp2:) :] ]| ->
  |[ is-greater (eval-arith[: (:AExp1:) :], 
             eval-arith[: (:AExp2:) :]) ]|
to-funcons:
  |[ eval-bool[: (:Exp1:)==(:Exp2:) :] ]| ->
  |[ is-eq (eval[: (:Exp1:) :], 
             eval[: (:Exp2:) :]) ]|
to-funcons:
  |[ eval-bool[: ((:BExp:)) :] ]| ->
  |[ eval-bool[: (:BExp:) :] ]|

